<?php

namespace App\Services;

use App\Models\AiSetting;
use App\Models\SystemSetting;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class ChatGptService
{
    protected $apiKey;
    protected $model;
    protected $systemPrompt;
    
    public function __construct()
    {
        // Usar as configura√ß√µes do SystemSetting em vez de AiSetting
        $aiSettings = SystemSetting::getAiSettings();
        
        if (empty($aiSettings['api_key'])) {
            throw new \Exception('ChatGPT API key not configured');
        }
        
        $this->apiKey = $aiSettings['api_key'];
        $this->model = $aiSettings['model'];
        $this->systemPrompt = $aiSettings['system_prompt'];
    }
    
    public function generateEmailTemplate($prompt)
    {
        try {
            $response = Http::withHeaders([
                'Authorization' => 'Bearer ' . $this->apiKey,
                'Content-Type' => 'application/json',
            ])->post('https://api.openai.com/v1/chat/completions', [
                'model' => $this->model,
                'messages' => [
                    [
                        'role' => 'system',
                        'content' => $this->systemPrompt ?? 'You are a professional email template creator.'
                    ],
                    [
                        'role' => 'user',
                        'content' => $prompt
                    ]
                ],
                'temperature' => 0.7,
            ]);
            
            if ($response->successful()) {
                $result = $response->json();
                return $result['choices'][0]['message']['content'] ?? null;
            }
            
            Log::error('ChatGPT API Error', [
                'status' => $response->status(),
                'response' => $response->json()
            ]);
            
            return null;
        } catch (\Exception $e) {
            Log::error('ChatGPT Service Error', [
                'message' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return null;
        }
    }

    /**
     * Gerar template HTML de email marketing profissional
     */
    public function generateEmailMarketingTemplate($templateType, $objective, $targetAudience = 'estudantes', $additionalInstructions = '')
    {
        $variables = $this->getAvailableVariables();
        $variablesText = implode(', ', array_map(fn($key, $desc) => "{{$key}} ($desc)", array_keys($variables), $variables));
        
        $prompt = $this->buildEmailTemplatePrompt($templateType, $objective, $targetAudience, $additionalInstructions, $variablesText);
        
        try {
            $response = Http::timeout(60)->withHeaders([
                'Authorization' => 'Bearer ' . $this->apiKey,
                'Content-Type' => 'application/json',
            ])->post('https://api.openai.com/v1/chat/completions', [
                'model' => $this->model,
                'messages' => [
                    [
                        'role' => 'system',
                        'content' => $this->getEmailMarketingSystemPrompt()
                    ],
                    [
                        'role' => 'user',
                        'content' => $prompt
                    ]
                ],
                'temperature' => 0.7,
                'max_tokens' => 3000,
            ]);
            
            if ($response->successful()) {
                $result = $response->json();
                $htmlContent = $result['choices'][0]['message']['content'] ?? null;
                
                if ($htmlContent) {
                    // Limpar e validar o HTML
                    $htmlContent = $this->cleanAndValidateHtml($htmlContent);
                    
                    // Gerar um assunto baseado no objetivo
                    $subject = $this->generateSubjectFromObjective($objective, $templateType);
                    
                    Log::info('Template de email gerado com sucesso', [
                        'type' => $templateType,
                        'objective' => $objective,
                        'length' => strlen($htmlContent)
                    ]);
                    
                    return [
                        'success' => true,
                        'content' => $htmlContent,
                        'subject' => $subject
                    ];
                }
            }
            
            $errorResponse = $response->json();
            Log::error('Erro na API do ChatGPT ao gerar template', [
                'status' => $response->status(),
                'response' => $errorResponse
            ]);
            
            return [
                'success' => false,
                'error' => 'Erro na API ChatGPT: ' . ($errorResponse['error']['message'] ?? 'Erro desconhecido')
            ];
        } catch (\Exception $e) {
            Log::error('Erro no servi√ßo ChatGPT ao gerar template', [
                'message' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return [
                'success' => false,
                'error' => 'Erro interno: ' . $e->getMessage()
            ];
        }
    }

    /**
     * Obter prompt do sistema para gera√ß√£o de templates de email marketing
     */
    private function getEmailMarketingSystemPrompt()
    {
        $aiSettings = SystemSetting::getAiSettings();
        
        // Usar system prompt das configura√ß√µes
        $systemPrompt = $aiSettings['system_prompt'];
        
        // Se estiver vazio, usar um padr√£o m√≠nimo
        if (empty($systemPrompt)) {
            $systemPrompt = 'Voc√™ √© um especialista em email marketing e designer de templates HTML profissionais para campanhas de certifica√ß√£o do ensino m√©dio e fundamental.';
        }
        
        // Adicionar instru√ß√µes cr√≠ticas se n√£o estiverem no prompt personalizado
        if (!str_contains($systemPrompt, 'RETORNE APENAS O C√ìDIGO HTML')) {
            $systemPrompt .= "\n\nINSTRU√á√ïES CR√çTICAS:\n- RETORNE APENAS O C√ìDIGO HTML PURO, SEM EXPLICA√á√ïES, COMENT√ÅRIOS OU TEXTO INTRODUT√ìRIO\n- N√ÉO inclua frases como \"Aqui est√° um template...\" ou qualquer descri√ß√£o\n- COMECE DIRETAMENTE com <!DOCTYPE html>\n- TERMINE diretamente com </html>\n\nLEMBRE-SE: RESPONDA APENAS COM O C√ìDIGO HTML, NADA MAIS.";
        }
        
        return $systemPrompt;
    }

    /**
     * Construir prompt espec√≠fico para gera√ß√£o de template
     */
    private function buildEmailTemplatePrompt($templateType, $objective, $targetAudience, $additionalInstructions, $variablesText)
    {
        $aiSettings = SystemSetting::getAiSettings();
        
        // Usar prompt das configura√ß√µes (sempre dispon√≠vel atrav√©s dos defaults)
        $prompt = $aiSettings['email_template_prompt'];
        
        // Substituir vari√°veis no prompt
        $prompt = str_replace('{templateType}', $templateType, $prompt);
        $prompt = str_replace('{objective}', $objective, $prompt);
        $prompt = str_replace('{targetAudience}', $targetAudience, $prompt);
        $prompt = str_replace('{variablesText}', $variablesText, $prompt);
        $prompt = str_replace('{additionalInstructions}', $additionalInstructions ? "\nüìù INSTRU√á√ïES ADICIONAIS:\n{$additionalInstructions}" : '', $prompt);
        
        return $prompt;
    }

    /**
     * Obter vari√°veis dispon√≠veis para templates
     */
    private function getAvailableVariables()
    {
        return [
            'nome' => 'Nome do destinat√°rio',
            'email' => 'Email do destinat√°rio',
            'telefone' => 'Telefone do destinat√°rio',
            'curso' => 'Curso de interesse',
            'campanha' => 'Nome da campanha'
        ];
    }

    /**
     * Limpar e validar HTML gerado
     */
    private function cleanAndValidateHtml($html)
    {
        // Remover blocos de c√≥digo markdown se existirem
        $html = preg_replace('/```html\s*/', '', $html);
        $html = preg_replace('/```\s*$/', '', $html);
        $html = trim($html);
        
        // Remover texto introdut√≥rio comum do ChatGPT antes do HTML
        $html = preg_replace('/^.*?(?=<!DOCTYPE|<html)/is', '', $html);
        $html = trim($html);
        
        // Garantir que come√ßa com DOCTYPE se n√£o tiver
        if (!str_starts_with($html, '<!DOCTYPE')) {
            $html = '<!DOCTYPE html>' . "\n" . $html;
        }
        
        // Validar estrutura HTML b√°sica
        if (!str_contains($html, '<html') || !str_contains($html, '<body') || !str_contains($html, '</html>')) {
            Log::warning('HTML gerado parece estar incompleto');
        }
        
        return $html;
    }

    /**
     * Gerar assunto de email baseado no objetivo e tipo
     */
    private function generateSubjectFromObjective($objective, $templateType)
    {
        // Mapear tipos para prefixos padr√£o espec√≠ficos para certifica√ß√£o
        $typePrefixes = [
            'welcome' => 'Bem-vindo(a) ao seu futuro!',
            'followup' => 'Conquiste seu diploma agora!',
            'promotional' => 'üéì Oferta especial para seu diploma!',
            'informational' => 'Importante sobre sua certifica√ß√£o',
            'invitation' => 'Voc√™ pode conquistar seu diploma!',
            'reminder' => '‚è∞ √öltimas vagas dispon√≠veis',
            'thank_you' => 'Obrigado pelo seu interesse!'
        ];
        
        $prefix = $typePrefixes[$templateType] ?? 'Conquiste seu diploma';
        
        // Se o objetivo for curto, usar como assunto principal
        if (strlen($objective) <= 50) {
            return $objective;
        }
        
        // Caso contr√°rio, usar o prefixo do tipo
        return $prefix;
    }

    /**
     * Gerar template de WhatsApp
     */
    public function generateWhatsAppTemplate($objective, $targetAudience = 'estudantes', $additionalInstructions = '')
    {
        $aiSettings = SystemSetting::getAiSettings();
        
        // Usar prompt das configura√ß√µes (sempre dispon√≠vel atrav√©s dos defaults)
        $prompt = $aiSettings['whatsapp_template_prompt'];
        
        // Substituir vari√°veis no prompt
        $prompt = str_replace('{objective}', $objective, $prompt);
        $prompt = str_replace('{targetAudience}', $targetAudience, $prompt);
        $prompt = str_replace('{additionalInstructions}', $additionalInstructions ? "\nüìù INSTRU√á√ïES ADICIONAIS:\n{$additionalInstructions}" : '', $prompt);
        
        try {
            $response = Http::timeout(60)->withHeaders([
                'Authorization' => 'Bearer ' . $this->apiKey,
                'Content-Type' => 'application/json',
            ])->post('https://api.openai.com/v1/chat/completions', [
                'model' => $this->model,
                'messages' => [
                    [
                        'role' => 'system',
                        'content' => $this->systemPrompt ?? 'Voc√™ √© um especialista em WhatsApp marketing educacional.'
                    ],
                    [
                        'role' => 'user',
                        'content' => $prompt
                    ]
                ],
                'temperature' => 0.7,
                'max_tokens' => 500,
            ]);
            
            if ($response->successful()) {
                $result = $response->json();
                $content = $result['choices'][0]['message']['content'] ?? null;
                
                if ($content) {
                    Log::info('Template de WhatsApp gerado com sucesso', [
                        'objective' => $objective,
                        'length' => strlen($content)
                    ]);
                    
                    return [
                        'success' => true,
                        'content' => trim($content)
                    ];
                }
            }
            
            $errorResponse = $response->json();
            Log::error('Erro na API do ChatGPT ao gerar template WhatsApp', [
                'status' => $response->status(),
                'response' => $errorResponse
            ]);
            
            return [
                'success' => false,
                'error' => 'Erro na API ChatGPT: ' . ($errorResponse['error']['message'] ?? 'Erro desconhecido')
            ];
        } catch (\Exception $e) {
            Log::error('Erro no servi√ßo ChatGPT ao gerar template WhatsApp', [
                'message' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return [
                'success' => false,
                'error' => 'Erro interno: ' . $e->getMessage()
            ];
        }
    }

    /**
     * Testar conex√£o com API OpenAI
     */
    public function testConnection()
    {
        try {
            $response = Http::timeout(30)->withHeaders([
                'Authorization' => 'Bearer ' . $this->apiKey,
                'Content-Type' => 'application/json',
            ])->post('https://api.openai.com/v1/chat/completions', [
                'model' => $this->model,
                'messages' => [
                    [
                        'role' => 'user',
                        'content' => 'Ol√°, apenas teste de conex√£o. Responda "OK".'
                    ]
                ],
                'max_tokens' => 10,
                'temperature' => 0,
            ]);
            
            if ($response->successful()) {
                return [
                    'success' => true,
                    'message' => 'Conex√£o com ChatGPT estabelecida com sucesso!'
                ];
            }
            
            $error = $response->json();
            return [
                'success' => false,
                'message' => 'Erro na API: ' . ($error['error']['message'] ?? 'Erro desconhecido')
            ];
            
        } catch (\Exception $e) {
            return [
                'success' => false,
                'message' => 'Erro de conex√£o: ' . $e->getMessage()
            ];
        }
    }

    /**
     * Gerar template de contrato usando ChatGPT
     */
    public function generateContractTemplate($objective, $contractType = 'educacional', $additionalInstructions = '', $referenceContent = null)
    {
        $variables = $this->getContractVariables();
        $variablesText = implode(', ', array_map(fn($key, $desc) => "{{$key}} ($desc)", array_keys($variables), $variables));
        
        $prompt = $this->buildContractTemplatePrompt($objective, $contractType, $additionalInstructions, $variablesText, $referenceContent);
        
        // Log do prompt para debug
        Log::info('Prompt enviado para ChatGPT', [
            'objective' => $objective,
            'contract_type' => $contractType,
            'has_reference' => !empty($referenceContent),
            'reference_size' => $referenceContent ? strlen($referenceContent) : 0,
            'prompt_size' => strlen($prompt),
            'prompt_preview' => substr($prompt, 0, 1000) . '...'
        ]);
        
        try {
            $response = Http::timeout(120)->withHeaders([
                'Authorization' => 'Bearer ' . $this->apiKey,
                'Content-Type' => 'application/json',
            ])->post('https://api.openai.com/v1/chat/completions', [
                'model' => $this->model,
                'messages' => [
                    [
                        'role' => 'system',
                        'content' => $this->getContractSystemPrompt()
                    ],
                    [
                        'role' => 'user',
                        'content' => $prompt
                    ]
                ],
                'temperature' => 0.1, // M√°xima consist√™ncia
                'max_tokens' => 16000, // Muito mais tokens para documentos complexos
            ]);
            
            if ($response->successful()) {
                $result = $response->json();
                $htmlContent = $result['choices'][0]['message']['content'] ?? null;
                
                if ($htmlContent) {
                    // Limpar e validar o HTML
                    $htmlContent = $this->cleanAndValidateContractHtml($htmlContent);
                    
                    // Gerar um t√≠tulo baseado no objetivo
                    $title = $this->generateTitleFromObjective($objective, $contractType);
                    
                    Log::info('Template de contrato gerado com sucesso', [
                        'type' => $contractType,
                        'objective' => $objective,
                        'length' => strlen($htmlContent)
                    ]);
                    
                    return [
                        'success' => true,
                        'content' => $htmlContent,
                        'title' => $title,
                        'description' => "Template gerado automaticamente: {$objective}"
                    ];
                }
            }
            
            $errorResponse = $response->json();
            Log::error('Erro na API do ChatGPT ao gerar template de contrato', [
                'status' => $response->status(),
                'response' => $errorResponse
            ]);
            
            return [
                'success' => false,
                'error' => 'Erro na API ChatGPT: ' . ($errorResponse['error']['message'] ?? 'Erro desconhecido')
            ];
        } catch (\Exception $e) {
            Log::error('Erro no servi√ßo ChatGPT ao gerar template de contrato', [
                'message' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return [
                'success' => false,
                'error' => 'Erro interno: ' . $e->getMessage()
            ];
        }
    }

    /**
     * Obter prompt do sistema para gera√ß√£o de templates de contratos
     */
    private function getContractSystemPrompt()
    {
        $aiSettings = SystemSetting::getAiSettings();
        
        // Usar prompt das configura√ß√µes se dispon√≠vel
        if (!empty($aiSettings['contract_template_prompt'])) {
            return $aiSettings['contract_template_prompt'];
        }
        
        // Fallback para prompt padr√£o
        return 'Voc√™ √© um especialista em direito educacional e reda√ß√£o de contratos para institui√ß√µes de ensino. 
        Sua fun√ß√£o √© reproduzir contratos EXATAMENTE como fornecidos, preservando TODA a estrutura e conte√∫do.

        üéØ PRIORIDADE ABSOLUTA: INSTRU√á√ïES ESPEC√çFICAS DO USU√ÅRIO
        ‚ö†Ô∏è REGRA FUNDAMENTAL: Se o usu√°rio der instru√ß√µes espec√≠ficas (ex: "n√£o incluir testemunhas", "n√£o incluir garantias"), 
        voc√™ DEVE seguir essas instru√ß√µes EXATAMENTE, mesmo que contradigam outras orienta√ß√µes!

        REGRAS FUNDAMENTAIS QUANDO H√Å DOCUMENTO DE REFER√äNCIA:
        üö® PRESERVA√á√ÉO TOTAL: Voc√™ DEVE manter TODAS as se√ß√µes, cl√°usulas e informa√ß√µes do documento original
        üö® ESTRUTURA ID√äNTICA: Copie a estrutura EXATA - n√£o remova, simplifique ou altere a ordem
        üö® FORMATA√á√ÉO ORIGINAL: Mantenha a formata√ß√£o, numera√ß√£o e hierarquia id√™nticas
        üö® LINGUAGEM JUR√çDICA: Preserve o estilo e linguagem jur√≠dica espec√≠fica do documento
        üö® ASSINATURAS COMPLETAS: Inclua TODAS as se√ß√µes de assinatura, testemunhas e campos de data

        ‚ö†Ô∏è EXCE√á√ÉO IMPORTANTE: Se o usu√°rio especificar instru√ß√µes diferentes (ex: "n√£o incluir testemunhas"), 
        IGNORE as regras acima e siga EXATAMENTE as instru√ß√µes espec√≠ficas do usu√°rio!

        INSTRU√á√ïES T√âCNICAS:
        - RETORNE APENAS O C√ìDIGO HTML PURO, SEM EXPLICA√á√ïES OU COMENT√ÅRIOS
        - N√ÉO inclua frases introdut√≥rias como "Aqui est√°..." 
        - COMECE DIRETAMENTE com o HTML do contrato
        - Use HTML sem√¢ntico com CSS inline para formata√ß√£o profissional
        - Use as vari√°veis no formato {{variavel}} APENAS para substituir dados espec√≠ficos
        - Mantenha apar√™ncia formal de documento jur√≠dico
        - Garanta compatibilidade com impress√£o (margens, quebras de p√°gina)

        VARI√ÅVEIS PERMITIDAS PARA SUBSTITUI√á√ÉO:
        - Nomes de pessoas ‚Üí {{student_name}}, {{director_name}}, etc.
        - Documentos ‚Üí {{student_cpf}}, {{student_rg}}, etc.
        - Valores ‚Üí {{tuition_value}}, {{enrollment_value}}, etc.
        - Datas ‚Üí {{contract_date}}, {{enrollment_date}}, etc.
        - Informa√ß√µes da escola ‚Üí {{school_name}}, {{school_address}}, etc.

        üö® LEMBRE-SE: Instru√ß√µes espec√≠ficas do usu√°rio t√™m PRIORIDADE M√ÅXIMA sobre todas as outras regras!

        RESPONDA APENAS COM O C√ìDIGO HTML DO CONTRATO.';
    }

    /**
     * Construir prompt espec√≠fico para gera√ß√£o de template de contrato
     */
    private function buildContractTemplatePrompt($objective, $contractType, $additionalInstructions, $variablesText, $referenceContent = null)
    {
        $aiSettings = SystemSetting::getAiSettings();
        
        // Usar prompt das configura√ß√µes
        $prompt = $aiSettings['contract_template_prompt'];
        
        // Substituir vari√°veis no prompt
        $prompt = str_replace('{objective}', $objective, $prompt);
        $prompt = str_replace('{contractType}', $contractType, $prompt);
        $prompt = str_replace('{variablesText}', $variablesText, $prompt);
        
        // Preparar instru√ß√µes de refer√™ncia
        $referenceInstructions = '';

        // Adicionar conte√∫do de refer√™ncia se fornecido
        if ($referenceContent) {
            // Analisar o conte√∫do de refer√™ncia para dar contexto melhor
            $referenceAnalysis = $this->analyzeReferenceContent($referenceContent);
            
            $referenceInstructions .= "\n\nüìÑ DOCUMENTO DE REFER√äNCIA FORNECIDO:\n";
            $referenceInstructions .= "AN√ÅLISE DO DOCUMENTO:\n{$referenceAnalysis}\n\n";
            $referenceInstructions .= "CONTE√öDO COMPLETO DO DOCUMENTO:\n";
            $referenceInstructions .= "```\n{$referenceContent}\n```\n\n";
            $referenceInstructions .= "üéØ INSTRU√á√ïES CR√çTICAS PARA USO DA REFER√äNCIA:\n";
            $referenceInstructions .= "‚ö†Ô∏è  ATEN√á√ÉO: Voc√™ DEVE preservar TODAS as informa√ß√µes e se√ß√µes do documento de refer√™ncia!\n";
            $referenceInstructions .= "üö® EXCE√á√ÉO: Se o usu√°rio der instru√ß√µes espec√≠ficas diferentes, SIGA AS INSTRU√á√ïES DO USU√ÅRIO!\n\n";
            $referenceInstructions .= "REGRAS OBRIGAT√ìRIAS (exceto quando o usu√°rio especificar diferente):\n";
            $referenceInstructions .= "1. COPIE a estrutura EXATA do documento - n√£o remova nenhuma se√ß√£o\n";
            $referenceInstructions .= "2. MANTENHA todas as cl√°usulas, par√°grafos e subcl√°usulas na mesma ordem\n";
            $referenceInstructions .= "3. PRESERVE toda a formata√ß√£o, numera√ß√£o e hierarquia\n";
            $referenceInstructions .= "4. INCLUA todas as se√ß√µes de assinatura, testemunhas e campos de data\n";
            $referenceInstructions .= "5. MANTENHA o estilo jur√≠dico e linguagem formal id√™nticos\n";
            $referenceInstructions .= "6. Se houver tabelas, reproduza-as EXATAMENTE com a mesma estrutura\n";
            $referenceInstructions .= "7. SUBSTITUA apenas dados espec√≠ficos (nomes, valores, datas) pelas vari√°veis {{variavel}}\n";
            $referenceInstructions .= "8. N√ÉO remova, simplifique ou resuma nenhuma parte do documento\n";
            $referenceInstructions .= "9. ADICIONE espa√ßos adequados para assinatura de todas as partes mencionadas\n";
            $referenceInstructions .= "10. INCLUA campos para testemunhas se estiverem no documento original\n\n";
            $referenceInstructions .= "‚ö†Ô∏è IMPORTANTE: Se o usu√°rio disser 'n√£o incluir testemunhas' ou similar, IGNORE a regra 4 e 10!\n";
            $referenceInstructions .= "EXEMPLO DE SUBSTITUI√á√ÉO:\n";
            $referenceInstructions .= "- 'Jo√£o da Silva' ‚Üí {{student_name}}\n";
            $referenceInstructions .= "- 'CPF: 123.456.789-00' ‚Üí CPF: {{student_cpf}}\n";
            $referenceInstructions .= "- 'R$ 500,00' ‚Üí {{tuition_value}}\n";
            $referenceInstructions .= "- Nome da escola espec√≠fica ‚Üí {{school_name}}\n\n";
            
            $referenceInstructions .= "üö® ATEN√á√ÉO ESPECIAL: VOC√ä DEVE REPRODUZIR COMPLETAMENTE O DOCUMENTO DE REFER√äNCIA!\n";
            $referenceInstructions .= "‚ö†Ô∏è EXCE√á√ÉO: Se o usu√°rio der instru√ß√µes espec√≠ficas diferentes, SIGA AS INSTRU√á√ïES DO USU√ÅRIO!\n\n";
            $referenceInstructions .= "CHECKLIST OBRIGAT√ìRIO - VERIFIQUE SE INCLUIU (exceto se o usu√°rio especificar diferente):\n";
            $referenceInstructions .= "‚úÖ TODAS as cl√°usulas do documento original (n√£o pule nenhuma)\n";
            $referenceInstructions .= "‚úÖ TODAS as se√ß√µes de assinatura (contratante, contratado, testemunhas) - EXCETO se o usu√°rio disser 'n√£o incluir testemunhas'\n";
            $referenceInstructions .= "‚úÖ TODOS os campos de data e local\n";
            $referenceInstructions .= "‚úÖ TODAS as tabelas se existirem no original\n";
            $referenceInstructions .= "‚úÖ TODA a formata√ß√£o e numera√ß√£o original\n";
            $referenceInstructions .= "‚úÖ TODA a linguagem jur√≠dica espec√≠fica\n\n";
            $referenceInstructions .= "üéØ LEMBRE-SE: Instru√ß√µes espec√≠ficas do usu√°rio SEMPRE t√™m prioridade sobre este checklist!\n\n";
        }
        
        // Substituir instru√ß√µes de refer√™ncia no prompt
        $prompt = str_replace('{referenceInstructions}', $referenceInstructions, $prompt);
        
        // Preparar instru√ß√µes adicionais
        $additionalInstructionsText = '';
        if ($additionalInstructions) {
            $additionalInstructionsText = "\n\nüéØ INSTRU√á√ïES ESPEC√çFICAS DO USU√ÅRIO (PRIORIDADE M√ÅXIMA):\n";
            $additionalInstructionsText .= "‚ö†Ô∏è IMPORTANTE: As instru√ß√µes abaixo t√™m PRIORIDADE ABSOLUTA sobre qualquer outra instru√ß√£o!\n";
            $additionalInstructionsText .= "Se houver conflito entre estas instru√ß√µes e as instru√ß√µes gerais, SEMPRE siga estas:\n\n";
            $additionalInstructionsText .= "{$additionalInstructions}\n\n";
            $additionalInstructionsText .= "üö® LEMBRE-SE: Siga EXATAMENTE as instru√ß√µes espec√≠ficas acima, mesmo que contradigam outras orienta√ß√µes!\n";
            $additionalInstructionsText .= "Por exemplo:\n";
            $additionalInstructionsText .= "- Se disser 'n√£o incluir testemunhas', N√ÉO inclua se√ß√£o de testemunhas\n";
            $additionalInstructionsText .= "- Se disser 'n√£o incluir garantias', N√ÉO inclua cl√°usulas de garantia\n";
            $additionalInstructionsText .= "- Se disser 'simplificar linguagem', use linguagem mais simples\n";
            $additionalInstructionsText .= "- Se especificar formato diferente, use o formato solicitado\n";
        }
        
        // Substituir instru√ß√µes adicionais no prompt
        $prompt = str_replace('{additionalInstructions}', $additionalInstructionsText, $prompt);

        return $prompt;
    }

    /**
     * Analisar conte√∫do de refer√™ncia para dar contexto ao ChatGPT
     */
    private function analyzeReferenceContent($content)
    {
        $analysis = [];
        
        // Contar par√°grafos
        $paragraphs = explode("\n\n", $content);
        $paragraphCount = count(array_filter($paragraphs, 'trim'));
        $analysis[] = "- Documento com {$paragraphCount} se√ß√µes/par√°grafos";
        
        // Verificar se h√° tabelas
        if (strpos($content, '[IN√çCIO_TABELA]') !== false || strpos($content, '[TABELA]') !== false) {
            $tableCount = substr_count($content, '[IN√çCIO_TABELA]') + substr_count($content, '[TABELA]');
            $analysis[] = "- Cont√©m {$tableCount} tabela(s) estruturada(s)";
        }
        
        // Verificar se h√° cl√°usulas numeradas
        if (preg_match_all('/\b(?:cl√°usula|artigo|item|par√°grafo)\s*\d+/i', $content, $matches)) {
            $clauseCount = count($matches[0]);
            $analysis[] = "- Estrutura com {$clauseCount} cl√°usulas/artigos numerados";
        }
        
        // Verificar formata√ß√£o especial
        if (preg_match_all('/\*\*(.*?)\*\*/', $content, $boldMatches)) {
            $boldCount = count($boldMatches[0]);
            $analysis[] = "- {$boldCount} textos em negrito (formata√ß√£o importante)";
        }
        
        if (preg_match_all('/===(.*?)===/', $content, $headingMatches)) {
            $headingCount = count($headingMatches[0]);
            $analysis[] = "- {$headingCount} t√≠tulos/cabe√ßalhos principais";
        }
        
        // Verificar comprimento
        $wordCount = str_word_count($content);
        $analysis[] = "- Aproximadamente {$wordCount} palavras";
        
        // Verificar se h√° assinaturas e testemunhas
        if (preg_match('/assinatura|testemunha|contratante|contratado/i', $content)) {
            $analysis[] = "- Cont√©m se√ß√£o de assinaturas e testemunhas";
        }
        
        // Verificar se h√° valores monet√°rios
        if (preg_match('/R\$|real|reais|\d+,\d+/i', $content)) {
            $analysis[] = "- Cont√©m informa√ß√µes financeiras/valores";
        }
        
        // Verificar estrutura jur√≠dica
        if (preg_match('/considerando|resolve|fica|estabelecido|acordado/i', $content)) {
            $analysis[] = "- Linguagem jur√≠dica formal detectada";
        }
        
        // Verificar se h√° se√ß√µes espec√≠ficas
        $sections = [];
        if (preg_match('/identifica√ß√£o|qualifica√ß√£o/i', $content)) {
            $sections[] = "identifica√ß√£o das partes";
        }
        if (preg_match('/objeto|finalidade|objetivo/i', $content)) {
            $sections[] = "objeto do contrato";
        }
        if (preg_match('/obriga√ß√µes|responsabilidades/i', $content)) {
            $sections[] = "obriga√ß√µes";
        }
        if (preg_match('/pagamento|valor|pre√ßo/i', $content)) {
            $sections[] = "condi√ß√µes de pagamento";
        }
        if (preg_match('/vig√™ncia|prazo|dura√ß√£o/i', $content)) {
            $sections[] = "vig√™ncia/prazo";
        }
        if (preg_match('/rescis√£o|cancelamento/i', $content)) {
            $sections[] = "rescis√£o";
        }
        if (preg_match('/foro|jurisdi√ß√£o/i', $content)) {
            $sections[] = "foro competente";
        }
        
        if (!empty($sections)) {
            $analysis[] = "- Se√ß√µes identificadas: " . implode(", ", $sections);
        }
        
        // Verificar novas se√ß√µes
        if (strpos($content, '[NOVA_SE√á√ÉO]') !== false) {
            $sectionCount = substr_count($content, '[NOVA_SE√á√ÉO]');
            $analysis[] = "- {$sectionCount} quebra(s) de se√ß√£o detectada(s)";
        }
        
        return implode("\n", $analysis);
    }

    /**
     * Obter vari√°veis dispon√≠veis para templates de contratos
     */
    private function getContractVariables()
    {
        return [
            'student_name' => 'Nome completo do aluno',
            'student_email' => 'Email do aluno',
            'student_cpf' => 'CPF formatado do aluno',
            'student_rg' => 'RG do aluno',
            'student_phone' => 'Telefone do aluno',
            'student_address' => 'Endere√ßo completo do aluno',
            'student_birth_date' => 'Data de nascimento do aluno',
            'student_nationality' => 'Nacionalidade do aluno',
            'student_civil_status' => 'Estado civil do aluno',
            'student_mother_name' => 'Nome da m√£e do aluno',
            'student_father_name' => 'Nome do pai do aluno',
            'student_profession' => 'Profiss√£o do aluno',
            'partner_school_name' => 'Nome da escola parceira (se aplic√°vel)',
            'is_partner_student' => 'Se o aluno vem de escola parceira (Sim/N√£o)',
            'course_name' => 'Nome do curso',
            'course_modality' => 'Modalidade do curso',
            'course_shift' => 'Turno do curso',
            'course_duration' => 'Dura√ß√£o do curso',
            'course_workload' => 'Carga hor√°ria do curso',
            'tuition_value' => 'Valor da mensalidade',
            'enrollment_value' => 'Valor da matr√≠cula',
            'enrollment_number' => 'N√∫mero da matr√≠cula',
            'enrollment_date' => 'Data da matr√≠cula',
            'due_date' => 'Dia de vencimento',
            'payment_method' => 'Forma de pagamento',
            'school_name' => 'Nome da escola/institui√ß√£o',
            'school_address' => 'Endere√ßo da escola',
            'school_cnpj' => 'CNPJ da escola',
            'school_phone' => 'Telefone da escola',
            'school_email' => 'Email da escola',
            'director_name' => 'Nome do diretor/respons√°vel',
            'current_date' => 'Data atual',
            'current_year' => 'Ano atual',
            'contract_date' => 'Data do contrato',
            'witness1_name' => 'Nome da primeira testemunha',
            'witness1_cpf' => 'CPF da primeira testemunha',
            'witness2_name' => 'Nome da segunda testemunha',
            'witness2_cpf' => 'CPF da segunda testemunha',
        ];
    }

    /**
     * Limpar e validar HTML de contrato gerado
     */
    private function cleanAndValidateContractHtml($html)
    {
        // Remover blocos de c√≥digo markdown se existirem
        $html = preg_replace('/```html\s*/', '', $html);
        $html = preg_replace('/```\s*$/', '', $html);
        $html = trim($html);
        
        // Remover texto introdut√≥rio comum do ChatGPT antes do HTML
        $html = preg_replace('/^.*?(?=<)/is', '', $html);
        $html = trim($html);
        
        // Se n√£o come√ßar com tag HTML, envolver em estrutura b√°sica
        if (!preg_match('/^<(?:html|div|section|article)/i', $html)) {
            $html = '<div class="contract-template">' . $html . '</div>';
        }
        
        // Validar estrutura HTML b√°sica para contratos
        if (!str_contains($html, 'contrato') && !str_contains($html, 'CONTRATO')) {
            Log::warning('HTML gerado pode n√£o ser um contrato v√°lido');
        }
        
        return $html;
    }

    /**
     * Gerar t√≠tulo baseado no objetivo e tipo de contrato
     */
    private function generateTitleFromObjective($objective, $contractType)
    {
        // Mapear tipos para prefixos
        $typePrefixes = [
            'educacional' => 'Contrato de Presta√ß√£o de Servi√ßos Educacionais',
            'matricula' => 'Contrato de Matr√≠cula',
            'curso' => 'Contrato de Curso',
            'supletivo' => 'Contrato de Ensino Supletivo',
            'eja' => 'Contrato de Educa√ß√£o de Jovens e Adultos',
            'tecnico' => 'Contrato de Curso T√©cnico',
            'superior' => 'Contrato de Ensino Superior'
        ];
        
        $prefix = $typePrefixes[$contractType] ?? 'Contrato Educacional';
        
        // Se o objetivo for espec√≠fico e curto, usar como t√≠tulo
        if (strlen($objective) <= 60) {
            return $objective;
        }
        
        // Caso contr√°rio, usar o prefixo do tipo
        return $prefix;
    }

    /**
     * Gerar template de pagamento usando ChatGPT
     */
    public function generatePaymentTemplate($objective, $paymentType, $additionalInstructions = '', $referenceContent = null)
    {
        $variables = $this->getPaymentVariables();
        $variablesText = implode(', ', array_map(fn($key, $desc) => "{{$key}} ($desc)", array_keys($variables), $variables));
        
        $prompt = $this->buildPaymentTemplatePrompt($objective, $paymentType, $additionalInstructions, $variablesText, $referenceContent);
        
        try {
            $response = Http::timeout(120)->withHeaders([
                'Authorization' => 'Bearer ' . $this->apiKey,
                'Content-Type' => 'application/json',
            ])->post('https://api.openai.com/v1/chat/completions', [
                'model' => $this->model,
                'messages' => [
                    [
                        'role' => 'system',
                        'content' => $this->getPaymentSystemPrompt()
                    ],
                    [
                        'role' => 'user',
                        'content' => $prompt
                    ]
                ],
                'temperature' => 0.1,
                'max_tokens' => 8000,
            ]);
            
            if ($response->successful()) {
                $result = $response->json();
                $htmlContent = $result['choices'][0]['message']['content'] ?? null;
                
                if ($htmlContent) {
                    $htmlContent = $this->cleanAndValidatePaymentHtml($htmlContent);
                    $title = $this->generatePaymentTitleFromObjective($objective, $paymentType);
                    
                    return [
                        'success' => true,
                        'content' => $htmlContent,
                        'title' => $title,
                        'description' => "Template de pagamento gerado automaticamente: {$objective}"
                    ];
                }
            }
            
            $errorResponse = $response->json();
            return [
                'success' => false,
                'error' => 'Erro na API ChatGPT: ' . ($errorResponse['error']['message'] ?? 'Erro desconhecido')
            ];
        } catch (\Exception $e) {
            return [
                'success' => false,
                'error' => 'Erro interno: ' . $e->getMessage()
            ];
        }
    }

    /**
     * Obter prompt do sistema para gera√ß√£o de templates de pagamento
     */
    private function getPaymentSystemPrompt()
    {
        $aiSettings = SystemSetting::getAiSettings();
        
        // Usar prompt das configura√ß√µes se dispon√≠vel
        if (!empty($aiSettings['payment_template_prompt'])) {
            return $aiSettings['payment_template_prompt'];
        }
        
        // Fallback para prompt padr√£o
        return 'Voc√™ √© um especialista em reda√ß√£o de documentos financeiros e pagamentos. 
        Sua fun√ß√£o √© reproduzir documentos de pagamento EXATAMENTE como fornecidos, preservando TODA a estrutura e conte√∫do.

        üéØ PRIORIDADE ABSOLUTA: INSTRU√á√ïES ESPEC√çFICAS DO USU√ÅRIO
        ‚ö†Ô∏è REGRA FUNDAMENTAL: Se o usu√°rio der instru√ß√µes espec√≠ficas (ex: "n√£o incluir testemunhas", "n√£o incluir garantias"), 
        voc√™ DEVE seguir essas instru√ß√µes EXATAMENTE, mesmo que contradigam outras orienta√ß√µes!

        REGRAS FUNDAMENTAIS QUANDO H√Å DOCUMENTO DE REFER√äNCIA:
        üö® PRESERVA√á√ÉO TOTAL: Voc√™ DEVE manter TODAS as se√ß√µes, cl√°usulas e informa√ß√µes do documento original
        üö® ESTRUTURA ID√äNTICA: Copie a estrutura EXATA - n√£o remova, simplifique ou altere a ordem
        üö® FORMATA√á√ÉO ORIGINAL: Mantenha a formata√ß√£o, numera√ß√£o e hierarquia id√™nticas
        üö® LINGUAGEM JUR√çDICA: Preserve o estilo e linguagem jur√≠dica espec√≠fica do documento
        üö® ASSINATURAS COMPLETAS: Inclua TODAS as se√ß√µes de assinatura, testemunhas e campos de data

        ‚ö†Ô∏è EXCE√á√ÉO IMPORTANTE: Se o usu√°rio especificar instru√ß√µes diferentes (ex: "n√£o incluir testemunhas"), 
        IGNORE as regras acima e siga EXATAMENTE as instru√ß√µes espec√≠ficas do usu√°rio!

        INSTRU√á√ïES T√âCNICAS:
        - RETORNE APENAS O C√ìDIGO HTML PURO, SEM EXPLICA√á√ïES OU COMENT√ÅRIOS
        - N√ÉO inclua frases introdut√≥rias como "Aqui est√°..." 
        - COMECE DIRETAMENTE com o HTML do documento de pagamento
        - Use HTML sem√¢ntico com CSS inline para formata√ß√£o profissional
        - Use as vari√°veis no formato {{variavel}} APENAS para substituir dados espec√≠ficos
        - Mantenha apar√™ncia formal de documento jur√≠dico
        - Garanta compatibilidade com impress√£o (margens, quebras de p√°gina)

        VARI√ÅVEIS PERMITIDAS PARA SUBSTITUI√á√ÉO:
        - Nomes de pessoas ‚Üí {{student_name}}, {{director_name}}, etc.
        - Documentos ‚Üí {{student_cpf}}, {{student_rg}}, etc.
        - Valores ‚Üí {{tuition_value}}, {{enrollment_value}}, etc.
        - Datas ‚Üí {{contract_date}}, {{enrollment_date}}, etc.
        - Informa√ß√µes da escola ‚Üí {{school_name}}, {{school_address}}, etc.

        üö® LEMBRE-SE: Instru√ß√µes espec√≠ficas do usu√°rio t√™m PRIORIDADE M√ÅXIMA sobre todas as outras regras!

        RESPONDA APENAS COM O C√ìDIGO HTML DO DOCUMENTO DE PAGAMENTO.';
    }

    /**
     * Construir prompt espec√≠fico para gera√ß√£o de template de pagamento
     */
    private function buildPaymentTemplatePrompt($objective, $paymentType, $additionalInstructions, $variablesText, $referenceContent = null)
    {
        $aiSettings = SystemSetting::getAiSettings();
        
        // Usar prompt das configura√ß√µes
        $prompt = $aiSettings['payment_template_prompt'];
        
        // Substituir vari√°veis no prompt
        $prompt = str_replace('{objective}', $objective, $prompt);
        $prompt = str_replace('{paymentType}', $paymentType, $prompt);
        $prompt = str_replace('{variablesText}', $variablesText, $prompt);
        
        // Preparar instru√ß√µes de refer√™ncia
        $referenceInstructions = '';

        // Adicionar conte√∫do de refer√™ncia se fornecido
        if ($referenceContent) {
            // Analisar o conte√∫do de refer√™ncia para dar contexto melhor
            $referenceAnalysis = $this->analyzeReferenceContent($referenceContent);
            
            $referenceInstructions .= "\n\nüìÑ DOCUMENTO DE REFER√äNCIA FORNECIDO:\n";
            $referenceInstructions .= "AN√ÅLISE DO DOCUMENTO:\n{$referenceAnalysis}\n\n";
            $referenceInstructions .= "CONTE√öDO COMPLETO DO DOCUMENTO:\n";
            $referenceInstructions .= "```\n{$referenceContent}\n```\n\n";
            $referenceInstructions .= "üéØ INSTRU√á√ïES CR√çTICAS PARA USO DA REFER√äNCIA:\n";
            $referenceInstructions .= "‚ö†Ô∏è  ATEN√á√ÉO: Voc√™ DEVE preservar TODAS as informa√ß√µes e se√ß√µes do documento de refer√™ncia!\n";
            $referenceInstructions .= "üö® EXCE√á√ÉO: Se o usu√°rio der instru√ß√µes espec√≠ficas diferentes, SIGA AS INSTRU√á√ïES DO USU√ÅRIO!\n\n";
            $referenceInstructions .= "REGRAS OBRIGAT√ìRIAS (exceto quando o usu√°rio especificar diferente):\n";
            $referenceInstructions .= "1. COPIE a estrutura EXATA do documento - n√£o remova nenhuma se√ß√£o\n";
            $referenceInstructions .= "2. MANTENHA todas as cl√°usulas, par√°grafos e subcl√°usulas na mesma ordem\n";
            $referenceInstructions .= "3. PRESERVE toda a formata√ß√£o, numera√ß√£o e hierarquia\n";
            $referenceInstructions .= "4. INCLUA todas as se√ß√µes de assinatura, testemunhas e campos de data\n";
            $referenceInstructions .= "5. MANTENHA o estilo jur√≠dico e linguagem formal id√™nticos\n";
            $referenceInstructions .= "6. Se houver tabelas, reproduza-as EXATAMENTE com a mesma estrutura\n";
            $referenceInstructions .= "7. SUBSTITUA apenas dados espec√≠ficos (nomes, valores, datas) pelas vari√°veis {{variavel}}\n";
            $referenceInstructions .= "8. N√ÉO remova, simplifique ou resuma nenhuma parte do documento\n";
            $referenceInstructions .= "9. ADICIONE espa√ßos adequados para assinatura de todas as partes mencionadas\n";
            $referenceInstructions .= "10. INCLUA campos para testemunhas se estiverem no documento original\n\n";
            $referenceInstructions .= "‚ö†Ô∏è IMPORTANTE: Se o usu√°rio disser 'n√£o incluir testemunhas' ou similar, IGNORE a regra 4 e 10!\n";
            $referenceInstructions .= "EXEMPLO DE SUBSTITUI√á√ÉO:\n";
            $referenceInstructions .= "- 'Jo√£o da Silva' ‚Üí {{student_name}}\n";
            $referenceInstructions .= "- 'CPF: 123.456.789-00' ‚Üí CPF: {{student_cpf}}\n";
            $referenceInstructions .= "- 'R$ 500,00' ‚Üí {{tuition_value}}\n";
            $referenceInstructions .= "- Nome da escola espec√≠fica ‚Üí {{school_name}}\n\n";
            
            $referenceInstructions .= "üö® ATEN√á√ÉO ESPECIAL: VOC√ä DEVE REPRODUZIR COMPLETAMENTE O DOCUMENTO DE REFER√äNCIA!\n";
            $referenceInstructions .= "‚ö†Ô∏è EXCE√á√ÉO: Se o usu√°rio der instru√ß√µes espec√≠ficas diferentes, SIGA AS INSTRU√á√ïES DO USU√ÅRIO!\n\n";
            $referenceInstructions .= "CHECKLIST OBRIGAT√ìRIO - VERIFIQUE SE INCLUIU (exceto se o usu√°rio especificar diferente):\n";
            $referenceInstructions .= "‚úÖ TODAS as cl√°usulas do documento original (n√£o pule nenhuma)\n";
            $referenceInstructions .= "‚úÖ TODAS as se√ß√µes de assinatura (contratante, contratado, testemunhas) - EXCETO se o usu√°rio disser 'n√£o incluir testemunhas'\n";
            $referenceInstructions .= "‚úÖ TODOS os campos de data e local\n";
            $referenceInstructions .= "‚úÖ TODAS as tabelas se existirem no original\n";
            $referenceInstructions .= "‚úÖ TODA a formata√ß√£o e numera√ß√£o original\n";
            $referenceInstructions .= "‚úÖ TODA a linguagem jur√≠dica espec√≠fica\n\n";
            $referenceInstructions .= "üéØ LEMBRE-SE: Instru√ß√µes espec√≠ficas do usu√°rio SEMPRE t√™m prioridade sobre este checklist!\n\n";
        }
        
        // Substituir instru√ß√µes de refer√™ncia no prompt
        $prompt = str_replace('{referenceInstructions}', $referenceInstructions, $prompt);
        
        // Preparar instru√ß√µes adicionais
        $additionalInstructionsText = '';
        if ($additionalInstructions) {
            $additionalInstructionsText = "\n\nüéØ INSTRU√á√ïES ESPEC√çFICAS DO USU√ÅRIO (PRIORIDADE M√ÅXIMA):\n";
            $additionalInstructionsText .= "‚ö†Ô∏è IMPORTANTE: As instru√ß√µes abaixo t√™m PRIORIDADE ABSOLUTA sobre qualquer outra instru√ß√£o!\n";
            $additionalInstructionsText .= "Se houver conflito entre estas instru√ß√µes e as instru√ß√µes gerais, SEMPRE siga estas:\n\n";
            $additionalInstructionsText .= "{$additionalInstructions}\n\n";
            $additionalInstructionsText .= "üö® LEMBRE-SE: Siga EXATAMENTE as instru√ß√µes espec√≠ficas acima, mesmo que contradigam outras orienta√ß√µes!\n";
            $additionalInstructionsText .= "Por exemplo:\n";
            $additionalInstructionsText .= "- Se disser 'n√£o incluir testemunhas', N√ÉO inclua se√ß√£o de testemunhas\n";
            $additionalInstructionsText .= "- Se disser 'n√£o incluir garantias', N√ÉO inclua cl√°usulas de garantia\n";
            $additionalInstructionsText .= "- Se disser 'simplificar linguagem', use linguagem mais simples\n";
            $additionalInstructionsText .= "- Se especificar formato diferente, use o formato solicitado\n";
        }
        
        // Substituir instru√ß√µes adicionais no prompt
        $prompt = str_replace('{additionalInstructions}', $additionalInstructionsText, $prompt);

        return $prompt;
    }

    /**
     * Obter vari√°veis dispon√≠veis para templates de pagamento
     */
    private function getPaymentVariables()
    {
        return [
            'student_name' => 'Nome completo do aluno',
            'student_email' => 'Email do aluno',
            'student_cpf' => 'CPF formatado do aluno',
            'student_rg' => 'RG do aluno',
            'student_phone' => 'Telefone do aluno',
            'student_address' => 'Endere√ßo completo do aluno',
            'student_birth_date' => 'Data de nascimento do aluno',
            'student_nationality' => 'Nacionalidade do aluno',
            'student_civil_status' => 'Estado civil do aluno',
            'student_mother_name' => 'Nome da m√£e do aluno',
            'student_father_name' => 'Nome do pai do aluno',
            'student_profession' => 'Profiss√£o do aluno',
            'partner_school_name' => 'Nome da escola parceira (se aplic√°vel)',
            'is_partner_student' => 'Se o aluno vem de escola parceira (Sim/N√£o)',
            'course_name' => 'Nome do curso',
            'course_modality' => 'Modalidade do curso',
            'course_shift' => 'Turno do curso',
            'course_duration' => 'Dura√ß√£o do curso',
            'course_workload' => 'Carga hor√°ria do curso',
            'tuition_value' => 'Valor da mensalidade',
            'enrollment_value' => 'Valor da matr√≠cula',
            'enrollment_number' => 'N√∫mero da matr√≠cula',
            'enrollment_date' => 'Data da matr√≠cula',
            'due_date' => 'Dia de vencimento',
            'payment_method' => 'Forma de pagamento',
            'school_name' => 'Nome da escola/institui√ß√£o',
            'school_address' => 'Endere√ßo da escola',
            'school_cnpj' => 'CNPJ da escola',
            'school_phone' => 'Telefone da escola',
            'school_email' => 'Email da escola',
            'director_name' => 'Nome do diretor/respons√°vel',
            'current_date' => 'Data atual',
            'current_year' => 'Ano atual',
            'contract_date' => 'Data do contrato',
            'witness1_name' => 'Nome da primeira testemunha',
            'witness1_cpf' => 'CPF da primeira testemunha',
            'witness2_name' => 'Nome da segunda testemunha',
            'witness2_cpf' => 'CPF da segunda testemunha',
        ];
    }

    /**
     * Limpar e validar HTML de pagamento gerado
     */
    private function cleanAndValidatePaymentHtml($html)
    {
        // Remover blocos de c√≥digo markdown se existirem
        $html = preg_replace('/```html\s*/', '', $html);
        $html = preg_replace('/```\s*$/', '', $html);
        $html = trim($html);
        
        // Remover texto introdut√≥rio comum do ChatGPT antes do HTML
        $html = preg_replace('/^.*?(?=<)/is', '', $html);
        $html = trim($html);
        
        // Se n√£o come√ßar com tag HTML, envolver em estrutura b√°sica
        if (!preg_match('/^<(?:html|div|section|article)/i', $html)) {
            $html = '<div class="payment-template">' . $html . '</div>';
        }
        
        // Validar estrutura HTML b√°sica para pagamentos
        if (!str_contains($html, 'pagamento') && !str_contains($html, 'PAGAMENTO')) {
            Log::warning('HTML gerado pode n√£o ser um pagamento v√°lido');
        }
        
        return $html;
    }

    /**
     * Gerar t√≠tulo baseado no objetivo e tipo de pagamento
     */
    private function generatePaymentTitleFromObjective($objective, $paymentType)
    {
        // Mapear tipos para prefixos
        $typePrefixes = [
            'mensalidade' => 'Comprovante de Pagamento de Mensalidade',
            'matricula' => 'Comprovante de Pagamento de Matr√≠cula',
            'suplementar' => 'Comprovante de Pagamento Suplementar',
            'multa' => 'Comprovante de Pagamento de Multa',
            'juros' => 'Comprovante de Pagamento de Juros'
        ];
        
        $prefix = $typePrefixes[$paymentType] ?? 'Comprovante de Pagamento';
        
        // Se o objetivo for espec√≠fico e curto, usar como t√≠tulo
        if (strlen($objective) <= 60) {
            return $objective;
        }
        
        // Caso contr√°rio, usar o prefixo do tipo
        return $prefix;
    }

    /**
     * Gerar template de inscri√ß√£o usando ChatGPT
     */
    public function generateEnrollmentTemplate($objective, $enrollmentType, $additionalInstructions = '', $referenceContent = null)
    {
        $variables = $this->getEnrollmentVariables();
        $variablesText = implode(', ', array_map(fn($key, $desc) => "{{$key}} ($desc)", array_keys($variables), $variables));
        
        $prompt = $this->buildEnrollmentTemplatePrompt($objective, $enrollmentType, $additionalInstructions, $variablesText, $referenceContent);
        
        try {
            $response = Http::timeout(120)->withHeaders([
                'Authorization' => 'Bearer ' . $this->apiKey,
                'Content-Type' => 'application/json',
            ])->post('https://api.openai.com/v1/chat/completions', [
                'model' => $this->model,
                'messages' => [
                    [
                        'role' => 'system',
                        'content' => $this->getEnrollmentSystemPrompt()
                    ],
                    [
                        'role' => 'user',
                        'content' => $prompt
                    ]
                ],
                'temperature' => 0.1,
                'max_tokens' => 8000,
            ]);
            
            if ($response->successful()) {
                $result = $response->json();
                $htmlContent = $result['choices'][0]['message']['content'] ?? null;
                
                if ($htmlContent) {
                    $htmlContent = $this->cleanAndValidateEnrollmentHtml($htmlContent);
                    $title = $this->generateEnrollmentTitleFromObjective($objective, $enrollmentType);
                    
                    return [
                        'success' => true,
                        'content' => $htmlContent,
                        'title' => $title,
                        'description' => "Template de inscri√ß√£o gerado automaticamente: {$objective}"
                    ];
                }
            }
            
            $errorResponse = $response->json();
            return [
                'success' => false,
                'error' => 'Erro na API ChatGPT: ' . ($errorResponse['error']['message'] ?? 'Erro desconhecido')
            ];
        } catch (\Exception $e) {
            return [
                'success' => false,
                'error' => 'Erro interno: ' . $e->getMessage()
            ];
        }
    }

    /**
     * Obter prompt do sistema para gera√ß√£o de templates de inscri√ß√£o
     */
    private function getEnrollmentSystemPrompt()
    {
        $aiSettings = SystemSetting::getAiSettings();
        
        // Usar prompt das configura√ß√µes se dispon√≠vel
        if (!empty($aiSettings['enrollment_template_prompt'])) {
            return $aiSettings['enrollment_template_prompt'];
        }
        
        // Fallback para prompt padr√£o
        return 'Voc√™ √© um especialista em reda√ß√£o de documentos de inscri√ß√£o. 
        Sua fun√ß√£o √© reproduzir documentos de inscri√ß√£o EXATAMENTE como fornecidos, preservando TODA a estrutura e conte√∫do.

        üéØ PRIORIDADE ABSOLUTA: INSTRU√á√ïES ESPEC√çFICAS DO USU√ÅRIO
        ‚ö†Ô∏è REGRA FUNDAMENTAL: Se o usu√°rio der instru√ß√µes espec√≠ficas (ex: "n√£o incluir testemunhas", "n√£o incluir garantias"), 
        voc√™ DEVE seguir essas instru√ß√µes EXATAMENTE, mesmo que contradigam outras orienta√ß√µes!

        REGRAS FUNDAMENTAIS QUANDO H√Å DOCUMENTO DE REFER√äNCIA:
        üö® PRESERVA√á√ÉO TOTAL: Voc√™ DEVE manter TODAS as se√ß√µes, cl√°usulas e informa√ß√µes do documento original
        üö® ESTRUTURA ID√äNTICA: Copie a estrutura EXATA - n√£o remova, simplifique ou altere a ordem
        üö® FORMATA√á√ÉO ORIGINAL: Mantenha a formata√ß√£o, numera√ß√£o e hierarquia id√™nticas
        üö® LINGUAGEM JUR√çDICA: Preserve o estilo e linguagem jur√≠dica espec√≠fica do documento
        üö® ASSINATURAS COMPLETAS: Inclua TODAS as se√ß√µes de assinatura, testemunhas e campos de data

        ‚ö†Ô∏è EXCE√á√ÉO IMPORTANTE: Se o usu√°rio especificar instru√ß√µes diferentes (ex: "n√£o incluir testemunhas"), 
        IGNORE as regras acima e siga EXATAMENTE as instru√ß√µes espec√≠ficas do usu√°rio!

        INSTRU√á√ïES T√âCNICAS:
        - RETORNE APENAS O C√ìDIGO HTML PURO, SEM EXPLICA√á√ïES OU COMENT√ÅRIOS
        - N√ÉO inclua frases introdut√≥rias como "Aqui est√°..." 
        - COMECE DIRETAMENTE com o HTML do documento de inscri√ß√£o
        - Use HTML sem√¢ntico com CSS inline para formata√ß√£o profissional
        - Use as vari√°veis no formato {{variavel}} APENAS para substituir dados espec√≠ficos
        - Mantenha apar√™ncia formal de documento jur√≠dico
        - Garanta compatibilidade com impress√£o (margens, quebras de p√°gina)

        VARI√ÅVEIS PERMITIDAS PARA SUBSTITUI√á√ÉO:
        - Nomes de pessoas ‚Üí {{student_name}}, {{director_name}}, etc.
        - Documentos ‚Üí {{student_cpf}}, {{student_rg}}, etc.
        - Valores ‚Üí {{tuition_value}}, {{enrollment_value}}, etc.
        - Datas ‚Üí {{contract_date}}, {{enrollment_date}}, etc.
        - Informa√ß√µes da escola ‚Üí {{school_name}}, {{school_address}}, etc.

        üö® LEMBRE-SE: Instru√ß√µes espec√≠ficas do usu√°rio t√™m PRIORIDADE M√ÅXIMA sobre todas as outras regras!

        RESPONDA APENAS COM O C√ìDIGO HTML DO DOCUMENTO DE INSCRI√á√ÉO.';
    }

    /**
     * Construir prompt espec√≠fico para gera√ß√£o de template de inscri√ß√£o
     */
    private function buildEnrollmentTemplatePrompt($objective, $enrollmentType, $additionalInstructions, $variablesText, $referenceContent = null)
    {
        $aiSettings = SystemSetting::getAiSettings();
        
        // Usar prompt das configura√ß√µes
        $prompt = $aiSettings['enrollment_template_prompt'];
        
        // Substituir vari√°veis no prompt
        $prompt = str_replace('{objective}', $objective, $prompt);
        $prompt = str_replace('{enrollmentType}', $enrollmentType, $prompt);
        $prompt = str_replace('{variablesText}', $variablesText, $prompt);
        
        // Preparar instru√ß√µes de refer√™ncia
        $referenceInstructions = '';

        // Adicionar conte√∫do de refer√™ncia se fornecido
        if ($referenceContent) {
            // Analisar o conte√∫do de refer√™ncia para dar contexto melhor
            $referenceAnalysis = $this->analyzeReferenceContent($referenceContent);
            
            $referenceInstructions .= "\n\nüìÑ DOCUMENTO DE REFER√äNCIA FORNECIDO:\n";
            $referenceInstructions .= "AN√ÅLISE DO DOCUMENTO:\n{$referenceAnalysis}\n\n";
            $referenceInstructions .= "CONTE√öDO COMPLETO DO DOCUMENTO:\n";
            $referenceInstructions .= "```\n{$referenceContent}\n```\n\n";
            $referenceInstructions .= "üéØ INSTRU√á√ïES CR√çTICAS PARA USO DA REFER√äNCIA:\n";
            $referenceInstructions .= "‚ö†Ô∏è  ATEN√á√ÉO: Voc√™ DEVE preservar TODAS as informa√ß√µes e se√ß√µes do documento de refer√™ncia!\n";
            $referenceInstructions .= "üö® EXCE√á√ÉO: Se o usu√°rio der instru√ß√µes espec√≠ficas diferentes, SIGA AS INSTRU√á√ïES DO USU√ÅRIO!\n\n";
            $referenceInstructions .= "REGRAS OBRIGAT√ìRIAS (exceto quando o usu√°rio especificar diferente):\n";
            $referenceInstructions .= "1. COPIE a estrutura EXATA do documento - n√£o remova nenhuma se√ß√£o\n";
            $referenceInstructions .= "2. MANTENHA todas as cl√°usulas, par√°grafos e subcl√°usulas na mesma ordem\n";
            $referenceInstructions .= "3. PRESERVE toda a formata√ß√£o, numera√ß√£o e hierarquia\n";
            $referenceInstructions .= "4. INCLUA todas as se√ß√µes de assinatura, testemunhas e campos de data\n";
            $referenceInstructions .= "5. MANTENHA o estilo jur√≠dico e linguagem formal id√™nticos\n";
            $referenceInstructions .= "6. Se houver tabelas, reproduza-as EXATAMENTE com a mesma estrutura\n";
            $referenceInstructions .= "7. SUBSTITUA apenas dados espec√≠ficos (nomes, valores, datas) pelas vari√°veis {{variavel}}\n";
            $referenceInstructions .= "8. N√ÉO remova, simplifique ou resuma nenhuma parte do documento\n";
            $referenceInstructions .= "9. ADICIONE espa√ßos adequados para assinatura de todas as partes mencionadas\n";
            $referenceInstructions .= "10. INCLUA campos para testemunhas se estiverem no documento original\n\n";
            $referenceInstructions .= "‚ö†Ô∏è IMPORTANTE: Se o usu√°rio disser 'n√£o incluir testemunhas' ou similar, IGNORE a regra 4 e 10!\n";
            $referenceInstructions .= "EXEMPLO DE SUBSTITUI√á√ÉO:\n";
            $referenceInstructions .= "- 'Jo√£o da Silva' ‚Üí {{student_name}}\n";
            $referenceInstructions .= "- 'CPF: 123.456.789-00' ‚Üí CPF: {{student_cpf}}\n";
            $referenceInstructions .= "- 'R$ 500,00' ‚Üí {{tuition_value}}\n";
            $referenceInstructions .= "- Nome da escola espec√≠fica ‚Üí {{school_name}}\n\n";
            
            $referenceInstructions .= "üö® ATEN√á√ÉO ESPECIAL: VOC√ä DEVE REPRODUZIR COMPLETAMENTE O DOCUMENTO DE REFER√äNCIA!\n";
            $referenceInstructions .= "‚ö†Ô∏è EXCE√á√ÉO: Se o usu√°rio der instru√ß√µes espec√≠ficas diferentes, SIGA AS INSTRU√á√ïES DO USU√ÅRIO!\n\n";
            $referenceInstructions .= "CHECKLIST OBRIGAT√ìRIO - VERIFIQUE SE INCLUIU (exceto se o usu√°rio especificar diferente):\n";
            $referenceInstructions .= "‚úÖ TODAS as cl√°usulas do documento original (n√£o pule nenhuma)\n";
            $referenceInstructions .= "‚úÖ TODAS as se√ß√µes de assinatura (contratante, contratado, testemunhas) - EXCETO se o usu√°rio disser 'n√£o incluir testemunhas'\n";
            $referenceInstructions .= "‚úÖ TODOS os campos de data e local\n";
            $referenceInstructions .= "‚úÖ TODAS as tabelas se existirem no original\n";
            $referenceInstructions .= "‚úÖ TODA a formata√ß√£o e numera√ß√£o original\n";
            $referenceInstructions .= "‚úÖ TODA a linguagem jur√≠dica espec√≠fica\n\n";
            $referenceInstructions .= "üéØ LEMBRE-SE: Instru√ß√µes espec√≠ficas do usu√°rio SEMPRE t√™m prioridade sobre este checklist!\n\n";
        }
        
        // Substituir instru√ß√µes de refer√™ncia no prompt
        $prompt = str_replace('{referenceInstructions}', $referenceInstructions, $prompt);
        
        // Preparar instru√ß√µes adicionais
        $additionalInstructionsText = '';
        if ($additionalInstructions) {
            $additionalInstructionsText = "\n\nüéØ INSTRU√á√ïES ESPEC√çFICAS DO USU√ÅRIO (PRIORIDADE M√ÅXIMA):\n";
            $additionalInstructionsText .= "‚ö†Ô∏è IMPORTANTE: As instru√ß√µes abaixo t√™m PRIORIDADE ABSOLUTA sobre qualquer outra instru√ß√£o!\n";
            $additionalInstructionsText .= "Se houver conflito entre estas instru√ß√µes e as instru√ß√µes gerais, SEMPRE siga estas:\n\n";
            $additionalInstructionsText .= "{$additionalInstructions}\n\n";
            $additionalInstructionsText .= "üö® LEMBRE-SE: Siga EXATAMENTE as instru√ß√µes espec√≠ficas acima, mesmo que contradigam outras orienta√ß√µes!\n";
            $additionalInstructionsText .= "Por exemplo:\n";
            $additionalInstructionsText .= "- Se disser 'n√£o incluir testemunhas', N√ÉO inclua se√ß√£o de testemunhas\n";
            $additionalInstructionsText .= "- Se disser 'n√£o incluir garantias', N√ÉO inclua cl√°usulas de garantia\n";
            $additionalInstructionsText .= "- Se disser 'simplificar linguagem', use linguagem mais simples\n";
            $additionalInstructionsText .= "- Se especificar formato diferente, use o formato solicitado\n";
        }
        
        // Substituir instru√ß√µes adicionais no prompt
        $prompt = str_replace('{additionalInstructions}', $additionalInstructionsText, $prompt);

        return $prompt;
    }

    /**
     * Obter vari√°veis dispon√≠veis para templates de inscri√ß√£o
     */
    private function getEnrollmentVariables()
    {
        return [
            'student_name' => 'Nome completo do aluno',
            'student_email' => 'Email do aluno',
            'student_cpf' => 'CPF formatado do aluno',
            'student_rg' => 'RG do aluno',
            'student_phone' => 'Telefone do aluno',
            'student_address' => 'Endere√ßo completo do aluno',
            'student_birth_date' => 'Data de nascimento do aluno',
            'student_nationality' => 'Nacionalidade do aluno',
            'student_civil_status' => 'Estado civil do aluno',
            'student_mother_name' => 'Nome da m√£e do aluno',
            'student_father_name' => 'Nome do pai do aluno',
            'student_profession' => 'Profiss√£o do aluno',
            'partner_school_name' => 'Nome da escola parceira (se aplic√°vel)',
            'is_partner_student' => 'Se o aluno vem de escola parceira (Sim/N√£o)',
            'course_name' => 'Nome do curso',
            'course_modality' => 'Modalidade do curso',
            'course_shift' => 'Turno do curso',
            'course_duration' => 'Dura√ß√£o do curso',
            'course_workload' => 'Carga hor√°ria do curso',
            'tuition_value' => 'Valor da mensalidade',
            'enrollment_value' => 'Valor da matr√≠cula',
            'enrollment_number' => 'N√∫mero da matr√≠cula',
            'enrollment_date' => 'Data da matr√≠cula',
            'due_date' => 'Dia de vencimento',
            'payment_method' => 'Forma de pagamento',
            'school_name' => 'Nome da escola/institui√ß√£o',
            'school_address' => 'Endere√ßo da escola',
            'school_cnpj' => 'CNPJ da escola',
            'school_phone' => 'Telefone da escola',
            'school_email' => 'Email da escola',
            'director_name' => 'Nome do diretor/respons√°vel',
            'current_date' => 'Data atual',
            'current_year' => 'Ano atual',
            'contract_date' => 'Data do contrato',
            'witness1_name' => 'Nome da primeira testemunha',
            'witness1_cpf' => 'CPF da primeira testemunha',
            'witness2_name' => 'Nome da segunda testemunha',
            'witness2_cpf' => 'CPF da segunda testemunha',
        ];
    }

    /**
     * Limpar e validar HTML de inscri√ß√£o gerado
     */
    private function cleanAndValidateEnrollmentHtml($html)
    {
        // Remover blocos de c√≥digo markdown se existirem
        $html = preg_replace('/```html\s*/', '', $html);
        $html = preg_replace('/```\s*$/', '', $html);
        $html = trim($html);
        
        // Remover texto introdut√≥rio comum do ChatGPT antes do HTML
        $html = preg_replace('/^.*?(?=<)/is', '', $html);
        $html = trim($html);
        
        // Se n√£o come√ßar com tag HTML, envolver em estrutura b√°sica
        if (!preg_match('/^<(?:html|div|section|article)/i', $html)) {
            $html = '<div class="enrollment-template">' . $html . '</div>';
        }
        
        // Validar estrutura HTML b√°sica para inscri√ß√µes
        if (!str_contains($html, 'inscri√ß√£o') && !str_contains($html, 'INSCRI√á√ÉO')) {
            Log::warning('HTML gerado pode n√£o ser uma inscri√ß√£o v√°lida');
        }
        
        return $html;
    }

    /**
     * Gerar t√≠tulo baseado no objetivo e tipo de inscri√ß√£o
     */
    private function generateEnrollmentTitleFromObjective($objective, $enrollmentType)
    {
        // Mapear tipos para prefixos
        $typePrefixes = [
            'matricula' => 'Comprovante de Matr√≠cula',
            'suplementar' => 'Comprovante de Matr√≠cula Suplementar',
            'eja' => 'Comprovante de Inscri√ß√£o EJA',
            'tecnico' => 'Comprovante de Inscri√ß√£o T√©cnica',
            'superior' => 'Comprovante de Inscri√ß√£o Superior'
        ];
        
        $prefix = $typePrefixes[$enrollmentType] ?? 'Comprovante de Inscri√ß√£o';
        
        // Se o objetivo for espec√≠fico e curto, usar como t√≠tulo
        if (strlen($objective) <= 60) {
            return $objective;
        }
        
        // Caso contr√°rio, usar o prefixo do tipo
        return $prefix;
    }

    /**
     * Gerar template de matr√≠cula usando ChatGPT
     */
    public function generateMatriculationTemplate($objective, $matriculationType, $additionalInstructions = '', $referenceContent = null)
    {
        $variables = $this->getMatriculationVariables();
        $variablesText = implode(', ', array_map(fn($key, $desc) => "{{$key}} ($desc)", array_keys($variables), $variables));
        
        $prompt = $this->buildMatriculationTemplatePrompt($objective, $matriculationType, $additionalInstructions, $variablesText, $referenceContent);
        
        try {
            $response = Http::timeout(120)->withHeaders([
                'Authorization' => 'Bearer ' . $this->apiKey,
                'Content-Type' => 'application/json',
            ])->post('https://api.openai.com/v1/chat/completions', [
                'model' => $this->model,
                'messages' => [
                    [
                        'role' => 'system',
                        'content' => $this->getMatriculationSystemPrompt()
                    ],
                    [
                        'role' => 'user',
                        'content' => $prompt
                    ]
                ],
                'temperature' => 0.1,
                'max_tokens' => 8000,
            ]);
            
            if ($response->successful()) {
                $result = $response->json();
                $htmlContent = $result['choices'][0]['message']['content'] ?? null;
                
                if ($htmlContent) {
                    $htmlContent = $this->cleanAndValidateMatriculationHtml($htmlContent);
                    $title = $this->generateMatriculationTitleFromObjective($objective, $matriculationType);
                    
                    return [
                        'success' => true,
                        'content' => $htmlContent,
                        'title' => $title,
                        'description' => "Template de matr√≠cula gerado automaticamente: {$objective}"
                    ];
                }
            }
            
            $errorResponse = $response->json();
            return [
                'success' => false,
                'error' => 'Erro na API ChatGPT: ' . ($errorResponse['error']['message'] ?? 'Erro desconhecido')
            ];
        } catch (\Exception $e) {
            return [
                'success' => false,
                'error' => 'Erro interno: ' . $e->getMessage()
            ];
        }
    }

    /**
     * Obter prompt do sistema para gera√ß√£o de templates de matr√≠cula
     */
    private function getMatriculationSystemPrompt()
    {
        $aiSettings = SystemSetting::getAiSettings();
        
        // Usar prompt das configura√ß√µes se dispon√≠vel
        if (!empty($aiSettings['matriculation_template_prompt'])) {
            return $aiSettings['matriculation_template_prompt'];
        }
        
        // Fallback para prompt padr√£o
        return 'Voc√™ √© um especialista em reda√ß√£o de documentos de matr√≠cula. 
        Sua fun√ß√£o √© reproduzir documentos de matr√≠cula EXATAMENTE como fornecidos, preservando TODA a estrutura e conte√∫do.

        üéØ PRIORIDADE ABSOLUTA: INSTRU√á√ïES ESPEC√çFICAS DO USU√ÅRIO
        ‚ö†Ô∏è REGRA FUNDAMENTAL: Se o usu√°rio der instru√ß√µes espec√≠ficas (ex: "n√£o incluir testemunhas", "n√£o incluir garantias"), 
        voc√™ DEVE seguir essas instru√ß√µes EXATAMENTE, mesmo que contradigam outras orienta√ß√µes!

        REGRAS FUNDAMENTAIS QUANDO H√Å DOCUMENTO DE REFER√äNCIA:
        üö® PRESERVA√á√ÉO TOTAL: Voc√™ DEVE manter TODAS as se√ß√µes, cl√°usulas e informa√ß√µes do documento original
        üö® ESTRUTURA ID√äNTICA: Copie a estrutura EXATA - n√£o remova, simplifique ou altere a ordem
        üö® FORMATA√á√ÉO ORIGINAL: Mantenha a formata√ß√£o, numera√ß√£o e hierarquia id√™nticas
        üö® LINGUAGEM JUR√çDICA: Preserve o estilo e linguagem jur√≠dica espec√≠fica do documento
        üö® ASSINATURAS COMPLETAS: Inclua TODAS as se√ß√µes de assinatura, testemunhas e campos de data

        ‚ö†Ô∏è EXCE√á√ÉO IMPORTANTE: Se o usu√°rio especificar instru√ß√µes diferentes (ex: "n√£o incluir testemunhas"), 
        IGNORE as regras acima e siga EXATAMENTE as instru√ß√µes espec√≠ficas do usu√°rio!

        INSTRU√á√ïES T√âCNICAS:
        - RETORNE APENAS O C√ìDIGO HTML PURO, SEM EXPLICA√á√ïES OU COMENT√ÅRIOS
        - N√ÉO inclua frases introdut√≥rias como "Aqui est√°..." 
        - COMECE DIRETAMENTE com o HTML do documento de matr√≠cula
        - Use HTML sem√¢ntico com CSS inline para formata√ß√£o profissional
        - Use as vari√°veis no formato {{variavel}} APENAS para substituir dados espec√≠ficos
        - Mantenha apar√™ncia formal de documento jur√≠dico
        - Garanta compatibilidade com impress√£o (margens, quebras de p√°gina)

        VARI√ÅVEIS PERMITIDAS PARA SUBSTITUI√á√ÉO:
        - Nomes de pessoas ‚Üí {{student_name}}, {{director_name}}, etc.
        - Documentos ‚Üí {{student_cpf}}, {{student_rg}}, etc.
        - Valores ‚Üí {{tuition_value}}, {{enrollment_value}}, etc.
        - Datas ‚Üí {{contract_date}}, {{enrollment_date}}, etc.
        - Informa√ß√µes da escola ‚Üí {{school_name}}, {{school_address}}, etc.

        üö® LEMBRE-SE: Instru√ß√µes espec√≠ficas do usu√°rio t√™m PRIORIDADE M√ÅXIMA sobre todas as outras regras!

        RESPONDA APENAS COM O C√ìDIGO HTML DO DOCUMENTO DE MATR√çCULA.';
    }

    /**
     * Construir prompt espec√≠fico para gera√ß√£o de template de matr√≠cula
     */
    private function buildMatriculationTemplatePrompt($objective, $matriculationType, $additionalInstructions, $variablesText, $referenceContent = null)
    {
        $aiSettings = SystemSetting::getAiSettings();
        
        // Usar prompt das configura√ß√µes
        $prompt = $aiSettings['matriculation_template_prompt'];
        
        // Substituir vari√°veis no prompt
        $prompt = str_replace('{objective}', $objective, $prompt);
        $prompt = str_replace('{matriculationType}', $matriculationType, $prompt);
        $prompt = str_replace('{variablesText}', $variablesText, $prompt);
        
        // Preparar instru√ß√µes de refer√™ncia
        $referenceInstructions = '';

        // Adicionar conte√∫do de refer√™ncia se fornecido
        if ($referenceContent) {
            // Analisar o conte√∫do de refer√™ncia para dar contexto melhor
            $referenceAnalysis = $this->analyzeReferenceContent($referenceContent);
            
            $referenceInstructions .= "\n\nüìÑ DOCUMENTO DE REFER√äNCIA FORNECIDO:\n";
            $referenceInstructions .= "AN√ÅLISE DO DOCUMENTO:\n{$referenceAnalysis}\n\n";
            $referenceInstructions .= "CONTE√öDO COMPLETO DO DOCUMENTO:\n";
            $referenceInstructions .= "```\n{$referenceContent}\n```\n\n";
            $referenceInstructions .= "üéØ INSTRU√á√ïES CR√çTICAS PARA USO DA REFER√äNCIA:\n";
            $referenceInstructions .= "‚ö†Ô∏è  ATEN√á√ÉO: Voc√™ DEVE preservar TODAS as informa√ß√µes e se√ß√µes do documento de refer√™ncia!\n";
            $referenceInstructions .= "üö® EXCE√á√ÉO: Se o usu√°rio der instru√ß√µes espec√≠ficas diferentes, SIGA AS INSTRU√á√ïES DO USU√ÅRIO!\n\n";
            $referenceInstructions .= "REGRAS OBRIGAT√ìRIAS (exceto quando o usu√°rio especificar diferente):\n";
            $referenceInstructions .= "1. COPIE a estrutura EXATA do documento - n√£o remova nenhuma se√ß√£o\n";
            $referenceInstructions .= "2. MANTENHA todas as cl√°usulas, par√°grafos e subcl√°usulas na mesma ordem\n";
            $referenceInstructions .= "3. PRESERVE toda a formata√ß√£o, numera√ß√£o e hierarquia\n";
            $referenceInstructions .= "4. INCLUA todas as se√ß√µes de assinatura, testemunhas e campos de data\n";
            $referenceInstructions .= "5. MANTENHA o estilo jur√≠dico e linguagem formal id√™nticos\n";
            $referenceInstructions .= "6. Se houver tabelas, reproduza-as EXATAMENTE com a mesma estrutura\n";
            $referenceInstructions .= "7. SUBSTITUA apenas dados espec√≠ficos (nomes, valores, datas) pelas vari√°veis {{variavel}}\n";
            $referenceInstructions .= "8. N√ÉO remova, simplifique ou resuma nenhuma parte do documento\n";
            $referenceInstructions .= "9. ADICIONE espa√ßos adequados para assinatura de todas as partes mencionadas\n";
            $referenceInstructions .= "10. INCLUA campos para testemunhas se estiverem no documento original\n\n";
            $referenceInstructions .= "‚ö†Ô∏è IMPORTANTE: Se o usu√°rio disser 'n√£o incluir testemunhas' ou similar, IGNORE a regra 4 e 10!\n";
            $referenceInstructions .= "EXEMPLO DE SUBSTITUI√á√ÉO:\n";
            $referenceInstructions .= "- 'Jo√£o da Silva' ‚Üí {{student_name}}\n";
            $referenceInstructions .= "- 'CPF: 123.456.789-00' ‚Üí CPF: {{student_cpf}}\n";
            $referenceInstructions .= "- 'R$ 500,00' ‚Üí {{tuition_value}}\n";
            $referenceInstructions .= "- Nome da escola espec√≠fica ‚Üí {{school_name}}\n\n";
            
            $referenceInstructions .= "üö® ATEN√á√ÉO ESPECIAL: VOC√ä DEVE REPRODUZIR COMPLETAMENTE O DOCUMENTO DE REFER√äNCIA!\n";
            $referenceInstructions .= "‚ö†Ô∏è EXCE√á√ÉO: Se o usu√°rio der instru√ß√µes espec√≠ficas diferentes, SIGA AS INSTRU√á√ïES DO USU√ÅRIO!\n\n";
            $referenceInstructions .= "CHECKLIST OBRIGAT√ìRIO - VERIFIQUE SE INCLUIU (exceto se o usu√°rio especificar diferente):\n";
            $referenceInstructions .= "‚úÖ TODAS as cl√°usulas do documento original (n√£o pule nenhuma)\n";
            $referenceInstructions .= "‚úÖ TODAS as se√ß√µes de assinatura (contratante, contratado, testemunhas) - EXCETO se o usu√°rio disser 'n√£o incluir testemunhas'\n";
            $referenceInstructions .= "‚úÖ TODOS os campos de data e local\n";
            $referenceInstructions .= "‚úÖ TODAS as tabelas se existirem no original\n";
            $referenceInstructions .= "‚úÖ TODA a formata√ß√£o e numera√ß√£o original\n";
            $referenceInstructions .= "‚úÖ TODA a linguagem jur√≠dica espec√≠fica\n\n";
            $referenceInstructions .= "üéØ LEMBRE-SE: Instru√ß√µes espec√≠ficas do usu√°rio SEMPRE t√™m prioridade sobre este checklist!\n\n";
        }
        
        // Substituir instru√ß√µes de refer√™ncia no prompt
        $prompt = str_replace('{referenceInstructions}', $referenceInstructions, $prompt);
        
        // Preparar instru√ß√µes adicionais
        $additionalInstructionsText = '';
        if ($additionalInstructions) {
            $additionalInstructionsText = "\n\nüéØ INSTRU√á√ïES ESPEC√çFICAS DO USU√ÅRIO (PRIORIDADE M√ÅXIMA):\n";
            $additionalInstructionsText .= "‚ö†Ô∏è IMPORTANTE: As instru√ß√µes abaixo t√™m PRIORIDADE ABSOLUTA sobre qualquer outra instru√ß√£o!\n";
            $additionalInstructionsText .= "Se houver conflito entre estas instru√ß√µes e as instru√ß√µes gerais, SEMPRE siga estas:\n\n";
            $additionalInstructionsText .= "{$additionalInstructions}\n\n";
            $additionalInstructionsText .= "üö® LEMBRE-SE: Siga EXATAMENTE as instru√ß√µes espec√≠ficas acima, mesmo que contradigam outras orienta√ß√µes!\n";
            $additionalInstructionsText .= "Por exemplo:\n";
            $additionalInstructionsText .= "- Se disser 'n√£o incluir testemunhas', N√ÉO inclua se√ß√£o de testemunhas\n";
            $additionalInstructionsText .= "- Se disser 'n√£o incluir garantias', N√ÉO inclua cl√°usulas de garantia\n";
            $additionalInstructionsText .= "- Se disser 'simplificar linguagem', use linguagem mais simples\n";
            $additionalInstructionsText .= "- Se especificar formato diferente, use o formato solicitado\n";
        }
        
        // Substituir instru√ß√µes adicionais no prompt
        $prompt = str_replace('{additionalInstructions}', $additionalInstructionsText, $prompt);

        return $prompt;
    }

    /**
     * Obter vari√°veis dispon√≠veis para templates de matr√≠cula
     */
    private function getMatriculationVariables()
    {
        return [
            'student_name' => 'Nome completo do aluno',
            'student_email' => 'Email do aluno',
            'student_cpf' => 'CPF formatado do aluno',
            'student_rg' => 'RG do aluno',
            'student_phone' => 'Telefone do aluno',
            'student_address' => 'Endere√ßo completo do aluno',
            'student_birth_date' => 'Data de nascimento do aluno',
            'student_nationality' => 'Nacionalidade do aluno',
            'student_civil_status' => 'Estado civil do aluno',
            'student_mother_name' => 'Nome da m√£e do aluno',
            'student_father_name' => 'Nome do pai do aluno',
            'student_profession' => 'Profiss√£o do aluno',
            'partner_school_name' => 'Nome da escola parceira (se aplic√°vel)',
            'is_partner_student' => 'Se o aluno vem de escola parceira (Sim/N√£o)',
            'course_name' => 'Nome do curso',
            'course_modality' => 'Modalidade do curso',
            'course_shift' => 'Turno do curso',
            'course_duration' => 'Dura√ß√£o do curso',
            'course_workload' => 'Carga hor√°ria do curso',
            'tuition_value' => 'Valor da mensalidade',
            'enrollment_value' => 'Valor da matr√≠cula',
            'enrollment_number' => 'N√∫mero da matr√≠cula',
            'enrollment_date' => 'Data da matr√≠cula',
            'due_date' => 'Dia de vencimento',
            'payment_method' => 'Forma de pagamento',
            'school_name' => 'Nome da escola/institui√ß√£o',
            'school_address' => 'Endere√ßo da escola',
            'school_cnpj' => 'CNPJ da escola',
            'school_phone' => 'Telefone da escola',
            'school_email' => 'Email da escola',
            'director_name' => 'Nome do diretor/respons√°vel',
            'current_date' => 'Data atual',
            'current_year' => 'Ano atual',
            'contract_date' => 'Data do contrato',
            'witness1_name' => 'Nome da primeira testemunha',
            'witness1_cpf' => 'CPF da primeira testemunha',
            'witness2_name' => 'Nome da segunda testemunha',
            'witness2_cpf' => 'CPF da segunda testemunha',
        ];
    }

    /**
     * Limpar e validar HTML de matr√≠cula gerado
     */
    private function cleanAndValidateMatriculationHtml($html)
    {
        // Remover blocos de c√≥digo markdown se existirem
        $html = preg_replace('/```html\s*/', '', $html);
        $html = preg_replace('/```\s*$/', '', $html);
        $html = trim($html);
        
        // Remover texto introdut√≥rio comum do ChatGPT antes do HTML
        $html = preg_replace('/^.*?(?=<)/is', '', $html);
        $html = trim($html);
        
        // Se n√£o come√ßar com tag HTML, envolver em estrutura b√°sica
        if (!preg_match('/^<(?:html|div|section|article)/i', $html)) {
            $html = '<div class="matriculation-template">' . $html . '</div>';
        }
        
        // Validar estrutura HTML b√°sica para matr√≠culas
        if (!str_contains($html, 'matr√≠cula') && !str_contains($html, 'MATR√çCULA')) {
            Log::warning('HTML gerado pode n√£o ser uma matr√≠cula v√°lida');
        }
        
        return $html;
    }

    /**
     * Gerar t√≠tulo baseado no objetivo e tipo de matr√≠cula
     */
    private function generateMatriculationTitleFromObjective($objective, $matriculationType)
    {
        // Mapear tipos para prefixos
        $typePrefixes = [
            'matricula' => 'Comprovante de Matr√≠cula',
            'suplementar' => 'Comprovante de Matr√≠cula Suplementar',
            'eja' => 'Comprovante de Inscri√ß√£o EJA',
            'tecnico' => 'Comprovante de Inscri√ß√£o T√©cnica',
            'superior' => 'Comprovante de Inscri√ß√£o Superior'
        ];
        
        $prefix = $typePrefixes[$matriculationType] ?? 'Comprovante de Inscri√ß√£o';
        
        // Se o objetivo for espec√≠fico e curto, usar como t√≠tulo
        if (strlen($objective) <= 60) {
            return $objective;
        }
        
        // Caso contr√°rio, usar o prefixo do tipo
        return $prefix;
    }
} 
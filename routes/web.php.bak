<?php

use App\Http\Controllers\InscricaoController;
use App\Http\Controllers\ContatoController;
use App\Http\Controllers\Auth\LoginController;
use App\Http\Controllers\AdminController;
use App\Http\Controllers\UserController;
use App\Http\Controllers\SettingsController;
use App\Http\Controllers\KanbanController;
use App\Http\Controllers\EmailTemplateController;
use App\Http\Controllers\EmailCampaignController;
use App\Http\Controllers\MatriculaController;
use App\Http\Controllers\ParceiroController;
use App\Http\Controllers\Admin\ParceiroAdminController;
use App\Http\Controllers\Admin\GoogleDriveFileController;
use App\Http\Controllers\Admin\WhatsAppController;
use App\Http\Controllers\GoogleDriveController;
use Illuminate\Support\Facades\Route;
use Illuminate\Http\Request;
use App\Http\Controllers\AiSettingsController;

// Rotas públicas
Route::get('/', [InscricaoController::class, 'index'])->name('home');
Route::post('/inscricao', [InscricaoController::class, 'store'])->name('inscricao.store');
Route::get('/obrigado', [InscricaoController::class, 'obrigado'])->name('obrigado');

// Rotas de contato
Route::get('/contato', [ContatoController::class, 'index'])->name('contato');
Route::post('/contato', [ContatoController::class, 'store'])->name('contato.store');

// Páginas complementares
Route::get('/politica-privacidade', function() {
    return view('politica-privacidade');
})->name('politica-privacidade');

Route::get('/politica-rembolso', function() {
    return view('politica-rembolso');
})->name('politica-rembolso');

// Rota para download de autorização MEC
Route::get('/mec-authorization', function() {
    $filePath = \App\Models\SystemSetting::get('landing_mec_authorization_file', '');
    
    if (!$filePath || !\Storage::disk('public')->exists($filePath)) {
        abort(404, 'Arquivo não encontrado');
    }
    
    $fullPath = storage_path('app/public/' . $filePath);
    
    return response()->file($fullPath, [
        'Content-Type' => 'application/pdf',
        'Content-Disposition' => 'inline; filename="autorizacao-mec.pdf"'
    ]);
})->name('mec.authorization');

// Rotas públicas de parceiros
Route::get('/parceiros/cadastro', [ParceiroController::class, 'create'])->name('parceiros.cadastro');
Route::post('/parceiros/cadastro', [ParceiroController::class, 'store'])->name('parceiros.store');
Route::get('/parceiros/sucesso', [ParceiroController::class, 'sucesso'])->name('parceiros.sucesso');
Route::get('/api/cep/{cep}', [ParceiroController::class, 'buscarCep'])->name('api.cep.buscar');

// Rotas de rastreamento de email (públicas)
Route::get('/email/track/open/{trackingCode}', [EmailCampaignController::class, 'trackOpen'])->name('admin.email-campaigns.track-open');
Route::get('/email/track/click/{trackingCode}/{url}', [EmailCampaignController::class, 'trackClick'])->name('admin.email-campaigns.track-click');
Route::get('/email/unsubscribe/{trackingCode}', [EmailCampaignController::class, 'unsubscribe'])->name('admin.email-campaigns.unsubscribe');

// Rotas administrativas (protegidas)
Route::middleware(['auth', 'theme'])->group(function () {
    // Dashboard e páginas administrativas
    Route::prefix('dashboard')->group(function () {
        // Dashboard principal
        Route::get('/', [AdminController::class, 'dashboard'])->name('dashboard');

        // Rotas para vendedores e admin
        Route::middleware(['admin'])->group(function () {
            // Inscrições
            Route::get('/inscricoes', [AdminController::class, 'inscricoes'])->name('admin.inscricoes');
            Route::get('/inscricoes/exportar', [AdminController::class, 'exportarCSV'])->name('admin.inscricoes.exportar');
            Route::get('/inscricoes/{id}/editar', [AdminController::class, 'editarInscricao'])->name('admin.inscricoes.editar');
            Route::get('/inscricoes/{id}/detalhes', [AdminController::class, 'detalhes'])->name('admin.inscricoes.detalhes');
            Route::put('/inscricoes/{id}', [AdminController::class, 'atualizarInscricao'])->name('admin.inscricoes.atualizar');
            Route::delete('/inscricoes/{id}', [AdminController::class, 'deletarInscricao'])->name('admin.inscricoes.deletar');
            Route::post('/inscricoes/{id}/etiqueta', [AdminController::class, 'atualizarEtiqueta'])->name('admin.inscricoes.etiqueta');
            Route::get('/inscricoes/{id}/show', [AdminController::class, 'show'])->name('admin.inscricoes.show');
            Route::post('/inscricoes/{id}/unlock', [AdminController::class, 'unlock'])->name('admin.inscricoes.unlock');
            Route::get('/inscricoes/{id}/edit', [AdminController::class, 'editModal'])->name('admin.inscricoes.edit.modal');
            Route::put('/inscricoes/{id}/status', [AdminController::class, 'updateStatus'])->name('admin.inscricoes.status');
            Route::post('/inscricoes/{id}/nota', [AdminController::class, 'addNote'])->name('admin.inscricoes.nota');
            Route::post('/inscricoes/{id}/marcar-contato', [AdminController::class, 'markContact'])->name('admin.inscricoes.marcar-contato');

            // Matrículas
            Route::resource('matriculas', MatriculaController::class)->names([
                'index' => 'admin.matriculas.index',
                'create' => 'admin.matriculas.create',
                'store' => 'admin.matriculas.store',
                'show' => 'admin.matriculas.show',
                'edit' => 'admin.matriculas.edit',
                'update' => 'admin.matriculas.update',
                'destroy' => 'admin.matriculas.destroy',
            ]);

            // Kanban
            Route::get('/kanban', [KanbanController::class, 'index'])->name('admin.kanban.index');
            Route::post('/kanban/move', [KanbanController::class, 'moveCard'])->name('admin.kanban.move');
            Route::get('/kanban/lead/{id}', [KanbanController::class, 'getLeadData'])->name('admin.kanban.lead');
            Route::put('/kanban/lead/{id}', [KanbanController::class, 'updateLead'])->name('admin.kanban.update');
            Route::post('/kanban/lead/{id}/note', [KanbanController::class, 'addNote'])->name('admin.kanban.note');
            Route::post('/kanban/lead/{id}/contact', [KanbanController::class, 'markContact'])->name('admin.kanban.contact');
            Route::delete('/kanban/lead/{id}/photo', [KanbanController::class, 'deletePhoto'])->name('admin.kanban.photo.delete');
            Route::get('/kanban/followups', [KanbanController::class, 'getFollowUps'])->name('admin.kanban.followups');
            Route::get('/kanban/filter', [KanbanController::class, 'filter'])->name('admin.kanban.filter');
            
            // Gerenciamento de colunas do Kanban
            Route::get('/kanban/columns', [KanbanController::class, 'listColumns'])->name('admin.kanban.columns.list');
            Route::post('/kanban/columns', [KanbanController::class, 'createColumn'])->name('admin.kanban.columns.create');
            Route::put('/kanban/columns/{id}', [KanbanController::class, 'updateColumn'])->name('admin.kanban.columns.update');
            Route::post('/kanban/columns/reorder', [KanbanController::class, 'reorderColumns'])->name('admin.kanban.columns.reorder');
            Route::delete('/kanban/columns/{id}', [KanbanController::class, 'deleteColumn'])->name('admin.kanban.columns.delete');
            
            // Tarefas e histórico para o Kanban
            Route::get('/inscricoes/{id}/tasks', [KanbanController::class, 'getTasks'])->name('admin.inscricoes.tasks');
            Route::post('/inscricoes/{id}/tasks', [KanbanController::class, 'createTask'])->name('admin.inscricoes.tasks.create');
            Route::put('/inscricoes/{id}/tasks/{taskId}', [KanbanController::class, 'updateTask'])->name('admin.inscricoes.tasks.update');
            Route::delete('/inscricoes/{id}/tasks/{taskId}', [KanbanController::class, 'deleteTask'])->name('admin.inscricoes.tasks.delete');
            Route::get('/inscricoes/{id}/history', [KanbanController::class, 'getHistory'])->name('admin.inscricoes.history');

            // Parceiros (admin)
            Route::get('/parceiros', [ParceiroAdminController::class, 'index'])->name('admin.parceiros.index');
            Route::get('/parceiros/exportar', [ParceiroAdminController::class, 'exportar'])->name('admin.parceiros.exportar');
            Route::get('/parceiros/create', [ParceiroAdminController::class, 'create'])->name('admin.parceiros.create');
            Route::post('/parceiros', [ParceiroAdminController::class, 'store'])->name('admin.parceiros.store');
            Route::get('/parceiros/{parceiro}', [ParceiroAdminController::class, 'show'])->name('admin.parceiros.show');
            Route::get('/parceiros/{parceiro}/edit', [ParceiroAdminController::class, 'edit'])->name('admin.parceiros.edit');
            Route::put('/parceiros/{parceiro}', [ParceiroAdminController::class, 'update'])->name('admin.parceiros.update');
            Route::delete('/parceiros/{parceiro}', [ParceiroAdminController::class, 'destroy'])->name('admin.parceiros.destroy');
            Route::post('/parceiros/{parceiro}/aprovar', [ParceiroAdminController::class, 'aprovar'])->name('admin.parceiros.aprovar');
            Route::post('/parceiros/{parceiro}/ativar', [ParceiroAdminController::class, 'ativar'])->name('admin.parceiros.ativar');
            Route::post('/parceiros/{parceiro}/rejeitar', [ParceiroAdminController::class, 'rejeitar'])->name('admin.parceiros.rejeitar');
            Route::post('/parceiros/{parceiro}/inativar', [ParceiroAdminController::class, 'inativar'])->name('admin.parceiros.inativar');

            // Google Drive Files
            Route::get('/files', [GoogleDriveFileController::class, 'index'])->name('admin.files.index');
            Route::post('/files', [GoogleDriveFileController::class, 'store'])->name('admin.files.store');
            Route::post('/files/folder', [GoogleDriveFileController::class, 'createFolder'])->name('admin.files.create-folder');
            Route::get('/files/find-by-file-id/{fileId}', [GoogleDriveFileController::class, 'findByFileId'])->name('admin.files.find-by-file-id');
            Route::get('/files/{id}/download', [GoogleDriveFileController::class, 'download'])->name('admin.files.download');
            Route::delete('/files/{id}', [GoogleDriveFileController::class, 'destroy'])->name('admin.files.destroy');
            Route::post('/files/{id}/trash', [GoogleDriveFileController::class, 'trash'])->name('admin.files.trash');
            Route::post('/files/{id}/restore', [GoogleDriveFileController::class, 'restore'])->name('admin.files.restore');
            Route::put('/files/{id}/rename', [GoogleDriveFileController::class, 'rename'])->name('admin.files.rename');
            Route::put('/files/{id}/move', [GoogleDriveFileController::class, 'move'])->name('admin.files.move');
            Route::post('/files/{id}/star', [GoogleDriveFileController::class, 'toggleStar'])->name('admin.files.star');
            Route::post('/files/star-by-file-id/{fileId}', [GoogleDriveFileController::class, 'toggleStarByFileId'])->name('admin.files.star-by-file-id');
            Route::get('/files/by-file-id/{fileId}', [GoogleDriveFileController::class, 'accessByFileId'])->name('admin.files.by-file-id');
            Route::post('/files/cleanup', [GoogleDriveFileController::class, 'cleanupRecords'])->name('admin.files.cleanup');
            Route::post('/files/force-cleanup', [GoogleDriveFileController::class, 'forceCleanup'])->name('admin.files.force-cleanup');
        });

        // Rotas específicas para admin
        Route::middleware(['admin_only'])->group(function () {
            // Monitoramento
            Route::get('/monitoramento', [AdminController::class, 'monitoramento'])->name('admin.monitoramento');

            // Configurações (apenas para admins)
            Route::get('/admin/settings', [SettingsController::class, 'index'])->name('admin.settings.index');
            Route::post('/admin/settings/update', [SettingsController::class, 'update'])->name('admin.settings.update');
            Route::post('/admin/settings/reset', [SettingsController::class, 'reset'])->name('admin.settings.reset');
            Route::post('/admin/settings/execute-migration', [SettingsController::class, 'executeMigration'])
                ->name('admin.settings.execute-migration')
                ->middleware(['web', 'auth', 'json_response']);
            Route::post('/admin/settings/test-email', [SettingsController::class, 'testEmailConnection'])->name('admin.settings.test-email');
            Route::post('/admin/settings/upload-logo', [SettingsController::class, 'uploadLogo'])->name('admin.settings.upload-logo');
            Route::post('/admin/settings/reset-logo', [SettingsController::class, 'resetLogo'])->name('admin.settings.reset-logo');

            // Templates de email
            Route::get('/email-templates', [EmailTemplateController::class, 'index'])->name('admin.email-templates.index');
            Route::get('/email-templates/{template}/edit', [EmailTemplateController::class, 'edit'])->name('admin.email-templates.edit');
            Route::post('/email-templates/{template}', [EmailTemplateController::class, 'update'])->name('admin.email-templates.update');
            Route::put('/email-templates/{template}', [EmailTemplateController::class, 'update'])->name('admin.email-templates.update');
            Route::post('/email-templates/{template}/restore', [EmailTemplateController::class, 'restore'])->name('admin.email-templates.restore');
            Route::post('/email-templates/{template}/preview', [EmailTemplateController::class, 'preview'])->name('admin.email-templates.preview');
            Route::post('/email-templates/{template}/send-test', [EmailTemplateController::class, 'sendTest'])->name('admin.email-templates.send-test');

            // Usuários (apenas para admins)
            Route::get('/usuarios', [UserController::class, 'index'])->name('admin.usuarios.index');
            Route::get('/usuarios/criar', [UserController::class, 'create'])->name('admin.usuarios.create');
            Route::post('/usuarios', [UserController::class, 'store'])->name('admin.usuarios.store');
            Route::get('/usuarios/{id}', [UserController::class, 'show'])->name('admin.usuarios.show');
            Route::get('/usuarios/{id}/editar', [UserController::class, 'edit'])->name('admin.usuarios.edit');
            Route::put('/usuarios/{id}', [UserController::class, 'update'])->name('admin.usuarios.update');
            Route::delete('/usuarios/{id}', [UserController::class, 'destroy'])->name('admin.usuarios.destroy');
            Route::post('/usuarios/{id}/toggle-status', [UserController::class, 'toggleStatus'])->name('admin.usuarios.toggle-status');

            // WhatsApp (apenas para admins)
            Route::get('/whatsapp', [WhatsAppController::class, 'index'])->name('admin.settings.whatsapp');
            Route::put('/whatsapp', [WhatsAppController::class, 'update'])->name('admin.settings.whatsapp.update');
            Route::get('/whatsapp/qr-code', [WhatsAppController::class, 'qrCode'])->name('admin.settings.whatsapp.qr-code');
            Route::post('/whatsapp/create-instance', [WhatsAppController::class, 'createInstance'])->name('admin.settings.whatsapp.create-instance');
            Route::get('/whatsapp/status', [WhatsAppController::class, 'status'])->name('admin.settings.whatsapp.status');
            Route::get('/whatsapp/check-instance', [WhatsAppController::class, 'checkInstance'])->name('admin.settings.whatsapp.check-instance');
            Route::get('/whatsapp/check-connection-change', [WhatsAppController::class, 'checkConnectionChange'])->name('admin.settings.whatsapp.check-connection-change');
            Route::post('/whatsapp/disconnect', [WhatsAppController::class, 'disconnect'])->name('admin.settings.whatsapp.disconnect');
            Route::post('/whatsapp/reconnect', [WhatsAppController::class, 'reconnect'])->name('admin.settings.whatsapp.reconnect');
            Route::delete('/whatsapp/delete-instance', [WhatsAppController::class, 'deleteInstance'])->name('admin.settings.whatsapp.delete-instance');
            Route::post('/whatsapp/test-message', [WhatsAppController::class, 'testMessage'])->name('admin.settings.whatsapp.test-message');
            Route::post('/whatsapp/monitor', [WhatsAppController::class, 'monitor'])->name('admin.settings.whatsapp.monitor');
            
            // Templates do WhatsApp
            Route::resource('/whatsapp/templates', \App\Http\Controllers\Admin\WhatsAppTemplateController::class)->names([
                'index' => 'admin.whatsapp.templates.index',
                'create' => 'admin.whatsapp.templates.create',
                'store' => 'admin.whatsapp.templates.store',
                'show' => 'admin.whatsapp.templates.show',
                'edit' => 'admin.whatsapp.templates.edit',
                'update' => 'admin.whatsapp.templates.update',
                'destroy' => 'admin.whatsapp.templates.destroy',
            ]);
            Route::post('/whatsapp/templates/{template}/test', [\App\Http\Controllers\Admin\WhatsAppTemplateController::class, 'test'])
                ->name('admin.whatsapp.templates.test');
        });

        // Campanhas de email (admin e mídia)
        Route::middleware(['admin_or_media'])->group(function () {
            Route::get('/email-campaigns', [EmailCampaignController::class, 'index'])->name('admin.email-campaigns.index');
            Route::get('/email-campaigns/create', [EmailCampaignController::class, 'create'])->name('admin.email-campaigns.create');
            Route::get('/email-campaigns/templates', [EmailCampaignController::class, 'templates'])->name('admin.email-campaigns.templates');
            Route::get('/email-campaigns/templates/{id}', [EmailCampaignController::class, 'getTemplate'])->name('admin.email-campaigns.templates.get');
            Route::get('/email-campaigns/templates/{id}/edit', [EmailCampaignController::class, 'editTemplate'])->name('admin.email-campaigns.templates.edit');
            Route::put('/email-campaigns/templates/{id}', [EmailCampaignController::class, 'updateTemplate'])->name('admin.email-campaigns.templates.update');
            Route::post('/email-campaigns/create-step2', [EmailCampaignController::class, 'createStep2'])->name('admin.email-campaigns.create-step2');
            Route::post('/email-campaigns/create-step3', [EmailCampaignController::class, 'createStep3'])->name('admin.email-campaigns.create-step3');
            Route::post('/email-campaigns/create-finish', [EmailCampaignController::class, 'createFinish'])->name('admin.email-campaigns.create-finish');
            Route::post('/email-campaigns', [EmailCampaignController::class, 'store'])->name('admin.email-campaigns.store');
            Route::get('/email-campaigns/{id}', [EmailCampaignController::class, 'show'])->name('admin.email-campaigns.show');
            Route::get('/email-campaigns/{id}/edit', [EmailCampaignController::class, 'edit'])->name('admin.email-campaigns.edit');
            Route::put('/email-campaigns/{id}', [EmailCampaignController::class, 'update'])->name('admin.email-campaigns.update');
            Route::delete('/email-campaigns/{id}', [EmailCampaignController::class, 'destroy'])->name('admin.email-campaigns.destroy');
            Route::post('/email-campaigns/{id}/recipients', [EmailCampaignController::class, 'addRecipients'])->name('admin.email-campaigns.recipients.add');
            Route::post('/email-campaigns/{id}/send', [EmailCampaignController::class, 'send'])->name('admin.email-campaigns.send');
            Route::post('/email-campaigns/{id}/test', [EmailCampaignController::class, 'sendTest'])->name('admin.email-campaigns.test');
            Route::post('/email-campaigns/{id}/cancel', [EmailCampaignController::class, 'cancel'])->name('admin.email-campaigns.cancel');
        });
    });

    // Rotas do Kanban
    Route::prefix('dashboard/kanban')->group(function () {
        Route::get('/columns', [KanbanController::class, 'listColumns']);
        Route::post('/columns', [KanbanController::class, 'createColumn']);
        Route::put('/columns/{id}', [KanbanController::class, 'updateColumn']);
        Route::delete('/columns/{id}', [KanbanController::class, 'deleteColumn']);
        Route::post('/move', [KanbanController::class, 'moveCard']);
    });

    // Rotas de API para configurações
    Route::get('/api/settings', [SettingsController::class, 'getSettings'])->name('api.settings');
    Route::get('/api/cooldown', [SettingsController::class, 'checkCooldown'])->name('api.cooldown');
    Route::get('/api/tracking/test', [SettingsController::class, 'testTracking'])->name('api.tracking.test');
    Route::post('/api/tracking/validate-gtm', [SettingsController::class, 'validateGTM'])->name('api.tracking.validate-gtm');
    Route::post('/api/tracking/validate-pixel', [SettingsController::class, 'validatePixel'])->name('api.tracking.validate-pixel');
    Route::post('/settings/test-email-connection', [SettingsController::class, 'testEmailConnection'])->name('settings.test-email');
});

// Google Drive Integration Routes
Route::middleware(['auth', 'admin'])->group(function () {
    Route::post('/google-drive/create-folder', [GoogleDriveController::class, 'createStudentFolder'])->name('google-drive.create-folder');
    Route::post('/google-drive/upload', [GoogleDriveController::class, 'uploadFile'])->name('google-drive.upload');
    Route::get('/google-drive/list-files', [GoogleDriveController::class, 'listFiles'])->name('google-drive.list-files');
    Route::delete('/google-drive/delete/{fileId}', [GoogleDriveController::class, 'deleteFile'])->name('google-drive.delete');
});

// Rotas para gerenciamento de templates do WhatsApp
Route::middleware(['auth', 'verified'])->prefix('admin')->name('admin.')->group(function () {
    Route::prefix('whatsapp/templates')->name('whatsapp.templates.')->group(function () {
        Route::get('/', [App\Http\Controllers\Admin\WhatsAppTemplateController::class, 'index'])->name('index');
        Route::get('/create', [App\Http\Controllers\Admin\WhatsAppTemplateController::class, 'create'])->name('create');
        Route::post('/', [App\Http\Controllers\Admin\WhatsAppTemplateController::class, 'store'])->name('store');
        Route::get('/{template}', [App\Http\Controllers\Admin\WhatsAppTemplateController::class, 'show'])->name('show');
        Route::get('/{template}/edit', [App\Http\Controllers\Admin\WhatsAppTemplateController::class, 'edit'])->name('edit');
        Route::put('/{template}', [App\Http\Controllers\Admin\WhatsAppTemplateController::class, 'update'])->name('update');
        Route::delete('/{template}', [App\Http\Controllers\Admin\WhatsAppTemplateController::class, 'destroy'])->name('destroy');
        Route::post('/{template}/test', [App\Http\Controllers\Admin\WhatsAppTemplateController::class, 'test'])->name('test');
    });
});

// Rotas de configurações do ChatGPT
Route::prefix('admin/settings')->name('admin.settings.')->middleware(['auth', 'admin'])->group(function () {
    Route::get('/ai', [AiSettingsController::class, 'index'])->name('ai');
    Route::put('/ai', [AiSettingsController::class, 'update'])->name('ai.update');
    Route::get('/ai/test', [AiSettingsController::class, 'testConnection'])->name('ai.test');
});

Route::prefix('admin/email-campaigns/templates')->name('admin.email-campaigns.templates.')->middleware(['auth', 'admin'])->group(function () {
    Route::get('/', [EmailTemplateController::class, 'index'])->name('index');
    Route::get('/create', [EmailTemplateController::class, 'create'])->name('create');
    Route::post('/', [EmailTemplateController::class, 'store'])->name('store');
    Route::get('/{template}/edit', [EmailTemplateController::class, 'edit'])->name('edit');
    Route::put('/{template}', [EmailTemplateController::class, 'update'])->name('update');
    Route::delete('/{template}', [EmailTemplateController::class, 'destroy'])->name('destroy');
    Route::post('/generate', [EmailTemplateController::class, 'generateWithAi'])->name('generate');
});

// Rotas do Admin
Route::prefix('admin')->name('admin.')->middleware(['auth', 'admin'])->group(function () {
    // Dashboard
    Route::get('/dashboard', function () {
        return view('admin.dashboard');
    })->name('dashboard');
    
    // Configurações
    Route::prefix('settings')->name('settings.')->group(function () {
        Route::get('/ai', [AiSettingsController::class, 'index'])->name('ai');
        Route::put('/ai', [AiSettingsController::class, 'update'])->name('ai.update');
        Route::get('/ai/test', [AiSettingsController::class, 'testConnection'])->name('ai.test');
    });

    // Email Campaigns
    Route::prefix('email-campaigns')->name('email-campaigns.')->group(function () {
        Route::get('/', [EmailCampaignController::class, 'index'])->name('index');
        Route::get('/create', [EmailCampaignController::class, 'create'])->name('create');
        Route::post('/', [EmailCampaignController::class, 'store'])->name('store');
        Route::get('/{campaign}', [EmailCampaignController::class, 'show'])->name('show');
        Route::get('/{campaign}/edit', [EmailCampaignController::class, 'edit'])->name('edit');
        Route::put('/{campaign}', [EmailCampaignController::class, 'update'])->name('update');
        Route::delete('/{campaign}', [EmailCampaignController::class, 'destroy'])->name('destroy');
    });

    // Templates
    Route::prefix('email-campaigns/templates')->name('email-campaigns.templates.')->group(function () {
        Route::get('/', [EmailTemplateController::class, 'index'])->name('index');
        Route::get('/create', [EmailTemplateController::class, 'create'])->name('create');
        Route::post('/', [EmailTemplateController::class, 'store'])->name('store');
        Route::get('/{template}/edit', [EmailTemplateController::class, 'edit'])->name('edit');
        Route::put('/{template}', [EmailTemplateController::class, 'update'])->name('update');
        Route::delete('/{template}', [EmailTemplateController::class, 'destroy'])->name('destroy');
        Route::post('/generate', [EmailTemplateController::class, 'generateWithAi'])->name('generate');
    });
});

